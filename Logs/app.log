07:04:2024 - 14:06:46.535 DEBUG logPackage.LogReader [main] - Variable Declaration: DELIMITER
07:04:2024 - 14:06:46.538 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_BROWSER_DISPLAY
07:04:2024 - 14:06:46.538 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_BROWSER_NAVIGATION_MARKERS
07:04:2024 - 14:06:46.538 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_BASE_FONT
07:04:2024 - 14:06:46.538 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_FLOW_OPTIONS
07:04:2024 - 14:06:46.539 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_COMPUTED_CALL
07:04:2024 - 14:06:46.539 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_CONDITIONAL_CALL
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_UNCONDITIONAL_CALL
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_COMPUTED_JUMP
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_CONDITIONAL_JUMP
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_UNCONDITIONAL_JUMP
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_FOLLOW_POINTERS
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_SEARCH_LIMIT
07:04:2024 - 14:06:46.540 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_SEARCH_TITLE
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_AUTO_ANALYSIS
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_BROWSER_FIELDS
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: MNEMONIC_GROUP_TITLE
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: OPERAND_GROUP_TITLE
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: LABEL_GROUP_TITLE
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_SHOW_BLOCK_NAME
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_BROWSER_POPUPS
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: CATEGORY_DECOMPILER_POPUPS
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_NUMERIC_FORMATTING
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_MAX_GO_TO_ENTRIES
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: SHOW_BLOCK_NAME_OPTION
07:04:2024 - 14:06:46.541 DEBUG logPackage.LogReader [main] - Variable Declaration: DISPLAY_NAMESPACE
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: NAVIGATION_OPTIONS
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: NAVIGATION_RANGE_OPTION
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: EXTERNAL_NAVIGATION_OPTION
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: FOLLOW_INDIRECTION_NAVIGATION_OPTION
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: HIGHLIGHT_CURSOR_LINE_COLOR_OPTION_NAME
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: HIGHLIGHT_CURSOR_LINE_COLOR
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: DEFAULT_CURSOR_LINE_COLOR
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: HIGHLIGHT_CURSOR_LINE_OPTION_NAME
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: HIGHLIGHT_CURSOR_LINE
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: CURSOR_HIGHLIGHT_GROUP
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: CURSOR_HIGHLIGHT_BUTTON_NAME
07:04:2024 - 14:06:46.542 DEBUG logPackage.LogReader [main] - Variable Declaration: HIGHLIGHT_COLOR_NAME
07:04:2024 - 14:06:46.543 DEBUG logPackage.LogReader [main] - Variable Declaration: mouseEventID
07:04:2024 - 14:06:46.548 INFO logPackage.LogReader [main] - Method Declaration: int getMouseEventID()
07:04:2024 - 14:06:46.554 INFO logPackage.LogReader [main] - Method Content: {
    return mouseEventID;
}
07:04:2024 - 14:06:46.557 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_SELECTION_COLOR
07:04:2024 - 14:06:46.557 DEBUG logPackage.LogReader [main] - Variable Declaration: DEFAULT_SELECTION_COLOR
07:04:2024 - 14:06:46.557 DEBUG logPackage.LogReader [main] - Variable Declaration: OPTION_HIGHLIGHT_COLOR
07:04:2024 - 14:06:46.558 DEBUG logPackage.LogReader [main] - Variable Declaration: DEFAULT_HIGHLIGHT_COLOR
07:04:2024 - 14:06:46.558 DEBUG logPackage.LogReader [main] - Variable Declaration: APPLY_ENABLED
07:04:2024 - 14:06:46.583 DEBUG logPackage.LogReader [main] - Variable Declaration: log
07:04:2024 - 14:06:46.584 INFO logPackage.LogReader [main] - Method Declaration: void launch(GhidraApplicationLayout, String[])
07:04:2024 - 14:06:46.589 INFO logPackage.LogReader [main] - Method Content: {
    Runnable mainTask = () -> {
        GhidraApplicationConfiguration configuration = new GhidraApplicationConfiguration();
        Application.initializeApplication(layout, configuration);
        log = LogManager.getLogger(GhidraRun.class);
        log.info("User " + SystemUtilities.getUserName() + " started Ghidra.");
        log.info("User settings directory: " + Application.getUserSettingsDirectory());
        log.info("User temp directory: " + Application.getUserTempDirectory());
        log.info("User cache directory: " + Application.getUserCacheDirectory());
        initializeTooltips();
        updateSplashScreenStatusMessage("Populating Ghidra help...");
        GhidraHelpService.install();
        ExtensionUtils.initializeExtensions();
        updateSplashScreenStatusMessage("Checking for previous project...");
        SystemUtilities.runSwingLater(() -> {
            String projectPath = processArguments(args);
            openProject(projectPath);
        });
    };
    // Start main thread in GhidraThreadGroup
    Thread mainThread = new Thread(new GhidraThreadGroup(), mainTask, "Ghidra");
    mainThread.start();
}
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.initializeApplication(layout, configuration)
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: LogManager.getLogger(GhidraRun.class)
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User " + SystemUtilities.getUserName() + " started Ghidra.")
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: SystemUtilities.getUserName()
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User settings directory: " + Application.getUserSettingsDirectory())
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.getUserSettingsDirectory()
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User temp directory: " + Application.getUserTempDirectory())
07:04:2024 - 14:06:46.589 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.getUserTempDirectory()
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User cache directory: " + Application.getUserCacheDirectory())
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.getUserCacheDirectory()
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: initializeTooltips()
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Populating Ghidra help...")
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: GhidraHelpService.install()
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: ExtensionUtils.initializeExtensions()
07:04:2024 - 14:06:46.590 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Checking for previous project...")
07:04:2024 - 14:06:46.591 TRACE logPackage.LogReader [main] - Method Call inside Method: SystemUtilities.runSwingLater(() -> {
    String projectPath = processArguments(args);
    openProject(projectPath);
})
07:04:2024 - 14:06:46.591 TRACE logPackage.LogReader [main] - Method Call inside Method: processArguments(args)
07:04:2024 - 14:06:46.591 TRACE logPackage.LogReader [main] - Method Call inside Method: openProject(projectPath)
07:04:2024 - 14:06:46.591 TRACE logPackage.LogReader [main] - Method Call inside Method: mainThread.start()
07:04:2024 - 14:06:46.591 DEBUG logPackage.LogReader [main] - Variable Declaration: mainTask
07:04:2024 - 14:06:46.592 DEBUG logPackage.LogReader [main] - Variable Declaration: configuration
07:04:2024 - 14:06:46.592 TRACE logPackage.LogReader [main] - Method Call: Application.initializeApplication(layout, configuration)
07:04:2024 - 14:06:46.592 TRACE logPackage.LogReader [main] - Method Call: LogManager.getLogger(GhidraRun.class)
07:04:2024 - 14:06:46.592 TRACE logPackage.LogReader [main] - Method Call: log.info("User " + SystemUtilities.getUserName() + " started Ghidra.")
07:04:2024 - 14:06:46.592 TRACE logPackage.LogReader [main] - Method Call: SystemUtilities.getUserName()
07:04:2024 - 14:06:46.592 TRACE logPackage.LogReader [main] - Method Call: log.info("User settings directory: " + Application.getUserSettingsDirectory())
07:04:2024 - 14:06:46.592 TRACE logPackage.LogReader [main] - Method Call: Application.getUserSettingsDirectory()
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: log.info("User temp directory: " + Application.getUserTempDirectory())
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: Application.getUserTempDirectory()
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: log.info("User cache directory: " + Application.getUserCacheDirectory())
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: Application.getUserCacheDirectory()
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: initializeTooltips()
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Populating Ghidra help...")
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: GhidraHelpService.install()
07:04:2024 - 14:06:46.593 TRACE logPackage.LogReader [main] - Method Call: ExtensionUtils.initializeExtensions()
07:04:2024 - 14:06:46.594 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Checking for previous project...")
07:04:2024 - 14:06:46.594 TRACE logPackage.LogReader [main] - Method Call: SystemUtilities.runSwingLater(() -> {
    String projectPath = processArguments(args);
    openProject(projectPath);
})
07:04:2024 - 14:06:46.594 DEBUG logPackage.LogReader [main] - Variable Declaration: projectPath
07:04:2024 - 14:06:46.594 TRACE logPackage.LogReader [main] - Method Call: processArguments(args)
07:04:2024 - 14:06:46.594 TRACE logPackage.LogReader [main] - Method Call: openProject(projectPath)
07:04:2024 - 14:06:46.594 DEBUG logPackage.LogReader [main] - Variable Declaration: mainThread
07:04:2024 - 14:06:46.594 TRACE logPackage.LogReader [main] - Method Call: mainThread.start()
07:04:2024 - 14:06:46.594 INFO logPackage.LogReader [main] - Method Declaration: String processArguments(String[])
07:04:2024 - 14:06:46.595 INFO logPackage.LogReader [main] - Method Content: {
    //TODO remove this special handling when possible
    if (args.length == 1 && (args[0].startsWith("-D") || args[0].indexOf(" -D") >= 0)) {
        args = args[0].split(" ");
    }
    String projectPath = null;
    for (String arg : args) {
        if (arg.startsWith("-D")) {
            String[] split = arg.substring(2).split("=");
            if (split.length == 2) {
                System.setProperty(split[0], split[1]);
            }
        } else {
            projectPath = arg;
        }
    }
    return projectPath;
}
07:04:2024 - 14:06:46.596 TRACE logPackage.LogReader [main] - Method Call inside Method: args[0].startsWith("-D")
07:04:2024 - 14:06:46.596 TRACE logPackage.LogReader [main] - Method Call inside Method: args[0].indexOf(" -D")
07:04:2024 - 14:06:46.596 TRACE logPackage.LogReader [main] - Method Call inside Method: args[0].split(" ")
07:04:2024 - 14:06:46.596 TRACE logPackage.LogReader [main] - Method Call inside Method: arg.startsWith("-D")
07:04:2024 - 14:06:46.596 TRACE logPackage.LogReader [main] - Method Call inside Method: arg.substring(2).split("=")
07:04:2024 - 14:06:46.597 TRACE logPackage.LogReader [main] - Method Call inside Method: arg.substring(2)
07:04:2024 - 14:06:46.597 TRACE logPackage.LogReader [main] - Method Call inside Method: System.setProperty(split[0], split[1])
07:04:2024 - 14:06:46.597 TRACE logPackage.LogReader [main] - Method Call: args[0].startsWith("-D")
07:04:2024 - 14:06:46.597 TRACE logPackage.LogReader [main] - Method Call: args[0].indexOf(" -D")
07:04:2024 - 14:06:46.598 TRACE logPackage.LogReader [main] - Method Call: args[0].split(" ")
07:04:2024 - 14:06:46.598 DEBUG logPackage.LogReader [main] - Variable Declaration: projectPath
07:04:2024 - 14:06:46.598 TRACE logPackage.LogReader [main] - Method Call: arg.startsWith("-D")
07:04:2024 - 14:06:46.598 DEBUG logPackage.LogReader [main] - Variable Declaration: split
07:04:2024 - 14:06:46.598 TRACE logPackage.LogReader [main] - Method Call: arg.substring(2).split("=")
07:04:2024 - 14:06:46.598 TRACE logPackage.LogReader [main] - Method Call: arg.substring(2)
07:04:2024 - 14:06:46.598 TRACE logPackage.LogReader [main] - Method Call: System.setProperty(split[0], split[1])
07:04:2024 - 14:06:46.598 DEBUG logPackage.LogReader [main] - Variable Declaration: arg
07:04:2024 - 14:06:46.599 INFO logPackage.LogReader [main] - Method Declaration: void updateSplashScreenStatusMessage(String)
07:04:2024 - 14:06:46.599 INFO logPackage.LogReader [main] - Method Content: {
    SystemUtilities.runSwingNow(() -> SplashScreen.updateSplashScreenStatus(message));
}
07:04:2024 - 14:06:46.599 TRACE logPackage.LogReader [main] - Method Call inside Method: SystemUtilities.runSwingNow(() -> SplashScreen.updateSplashScreenStatus(message))
07:04:2024 - 14:06:46.599 TRACE logPackage.LogReader [main] - Method Call inside Method: SplashScreen.updateSplashScreenStatus(message)
07:04:2024 - 14:06:46.599 TRACE logPackage.LogReader [main] - Method Call: SystemUtilities.runSwingNow(() -> SplashScreen.updateSplashScreenStatus(message))
07:04:2024 - 14:06:46.599 TRACE logPackage.LogReader [main] - Method Call: SplashScreen.updateSplashScreenStatus(message)
07:04:2024 - 14:06:46.599 INFO logPackage.LogReader [main] - Method Declaration: void initializeTooltips()
07:04:2024 - 14:06:46.600 INFO logPackage.LogReader [main] - Method Content: {
    int currentDelay = ToolTipManager.sharedInstance().getDismissDelay();
    ToolTipManager.sharedInstance().setDismissDelay(currentDelay * 2);
}
07:04:2024 - 14:06:46.600 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance().getDismissDelay()
07:04:2024 - 14:06:46.600 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance()
07:04:2024 - 14:06:46.600 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance().setDismissDelay(currentDelay * 2)
07:04:2024 - 14:06:46.600 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance()
07:04:2024 - 14:06:46.600 DEBUG logPackage.LogReader [main] - Variable Declaration: currentDelay
07:04:2024 - 14:06:46.600 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance().getDismissDelay()
07:04:2024 - 14:06:46.601 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance()
07:04:2024 - 14:06:46.601 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance().setDismissDelay(currentDelay * 2)
07:04:2024 - 14:06:46.601 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance()
07:04:2024 - 14:06:46.602 INFO logPackage.LogReader [main] - Method Declaration: void openProject(String)
07:04:2024 - 14:06:46.604 INFO logPackage.LogReader [main] - Method Content: {
    updateSplashScreenStatusMessage("Creating project manager...");
    ProjectManager pm = new GhidraProjectManager();
    updateSplashScreenStatusMessage("Creating front end tool...");
    // Show this warning before creating the tool.   If we create the tool first, then we may
    // see odd dialog behavior caused tool plugins creating dialogs during initialization.
    if (Application.isTestBuild()) {
        Msg.showWarn(GhidraRun.class, null, "Unsupported Ghidra Distribution", "WARNING! Please be aware that this is an unsupported and uncertified\n" + "build of Ghidra!  This software may be unstable and data created\n" + "may be incompatible with future releases.");
    }
    FrontEndTool tool = new FrontEndTool(pm);
    boolean reopen = true;
    ProjectLocator projectLocator = null;
    if (projectPath != null) {
        File projectFile = new File(projectPath);
        String name = projectFile.getName();
        if (!name.endsWith(ProjectLocator.getProjectExtension())) {
            Msg.showInfo(GhidraRun.class, null, "Invalid Project", "The specified file is not a project file: " + projectPath);
        } else {
            projectLocator = new ProjectLocator(projectFile.getParent(), name);
            reopen = false;
        }
    }
    if (projectLocator == null && tool.shouldRestorePreviousProject()) {
        updateSplashScreenStatusMessage("Checking for last opened project...");
        projectLocator = pm.getLastOpenedProject();
    }
    tool.setVisible(true);
    if (projectLocator != null) {
        openProject(tool, projectLocator, reopen);
    }
}
07:04:2024 - 14:06:46.604 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Creating project manager...")
07:04:2024 - 14:06:46.604 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Creating front end tool...")
07:04:2024 - 14:06:46.604 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.isTestBuild()
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showWarn(GhidraRun.class, null, "Unsupported Ghidra Distribution", "WARNING! Please be aware that this is an unsupported and uncertified\n" + "build of Ghidra!  This software may be unstable and data created\n" + "may be incompatible with future releases.")
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: projectFile.getName()
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: name.endsWith(ProjectLocator.getProjectExtension())
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: ProjectLocator.getProjectExtension()
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: projectFile.getParent()
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Invalid Project", "The specified file is not a project file: " + projectPath)
07:04:2024 - 14:06:46.605 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.shouldRestorePreviousProject()
07:04:2024 - 14:06:46.606 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Checking for last opened project...")
07:04:2024 - 14:06:46.606 TRACE logPackage.LogReader [main] - Method Call inside Method: pm.getLastOpenedProject()
07:04:2024 - 14:06:46.606 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.setVisible(true)
07:04:2024 - 14:06:46.606 TRACE logPackage.LogReader [main] - Method Call inside Method: openProject(tool, projectLocator, reopen)
07:04:2024 - 14:06:46.606 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Creating project manager...")
07:04:2024 - 14:06:46.606 DEBUG logPackage.LogReader [main] - Variable Declaration: pm
07:04:2024 - 14:06:46.606 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Creating front end tool...")
07:04:2024 - 14:06:46.607 TRACE logPackage.LogReader [main] - Method Call: Application.isTestBuild()
07:04:2024 - 14:06:46.607 TRACE logPackage.LogReader [main] - Method Call: Msg.showWarn(GhidraRun.class, null, "Unsupported Ghidra Distribution", "WARNING! Please be aware that this is an unsupported and uncertified\n" + "build of Ghidra!  This software may be unstable and data created\n" + "may be incompatible with future releases.")
07:04:2024 - 14:06:46.607 DEBUG logPackage.LogReader [main] - Variable Declaration: tool
07:04:2024 - 14:06:46.607 DEBUG logPackage.LogReader [main] - Variable Declaration: reopen
07:04:2024 - 14:06:46.607 DEBUG logPackage.LogReader [main] - Variable Declaration: projectLocator
07:04:2024 - 14:06:46.607 DEBUG logPackage.LogReader [main] - Variable Declaration: projectFile
07:04:2024 - 14:06:46.607 DEBUG logPackage.LogReader [main] - Variable Declaration: name
07:04:2024 - 14:06:46.607 TRACE logPackage.LogReader [main] - Method Call: projectFile.getName()
07:04:2024 - 14:06:46.607 TRACE logPackage.LogReader [main] - Method Call: name.endsWith(ProjectLocator.getProjectExtension())
07:04:2024 - 14:06:46.607 TRACE logPackage.LogReader [main] - Method Call: ProjectLocator.getProjectExtension()
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: projectFile.getParent()
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Invalid Project", "The specified file is not a project file: " + projectPath)
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: tool.shouldRestorePreviousProject()
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Checking for last opened project...")
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: pm.getLastOpenedProject()
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: tool.setVisible(true)
07:04:2024 - 14:06:46.608 TRACE logPackage.LogReader [main] - Method Call: openProject(tool, projectLocator, reopen)
07:04:2024 - 14:06:46.608 INFO logPackage.LogReader [main] - Method Declaration: void openProject(FrontEndTool, ProjectLocator, boolean)
07:04:2024 - 14:06:46.609 INFO logPackage.LogReader [main] - Method Content: {
    SplashScreen.updateSplashScreenStatus((reopen ? "Reopening" : "Opening") + " project: " + projectLocator.getName());
    Runnable r = () -> doOpenProject(tool, projectLocator, reopen);
    TaskLauncher.launchModal("Opening Project", () -> Swing.runNow(r));
}
07:04:2024 - 14:06:46.609 TRACE logPackage.LogReader [main] - Method Call inside Method: SplashScreen.updateSplashScreenStatus((reopen ? "Reopening" : "Opening") + " project: " + projectLocator.getName())
07:04:2024 - 14:06:46.609 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.getName()
07:04:2024 - 14:06:46.609 TRACE logPackage.LogReader [main] - Method Call inside Method: doOpenProject(tool, projectLocator, reopen)
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call inside Method: TaskLauncher.launchModal("Opening Project", () -> Swing.runNow(r))
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call inside Method: Swing.runNow(r)
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call: SplashScreen.updateSplashScreenStatus((reopen ? "Reopening" : "Opening") + " project: " + projectLocator.getName())
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call: projectLocator.getName()
07:04:2024 - 14:06:46.610 DEBUG logPackage.LogReader [main] - Variable Declaration: r
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call: doOpenProject(tool, projectLocator, reopen)
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call: TaskLauncher.launchModal("Opening Project", () -> Swing.runNow(r))
07:04:2024 - 14:06:46.610 TRACE logPackage.LogReader [main] - Method Call: Swing.runNow(r)
07:04:2024 - 14:06:46.611 INFO logPackage.LogReader [main] - Method Declaration: void doOpenProject(FrontEndTool, ProjectLocator, boolean)
07:04:2024 - 14:06:46.612 INFO logPackage.LogReader [main] - Method Content: {
    try {
        ProjectManager pm = tool.getProjectManager();
        Project activeProject = pm.openProject(projectLocator, true, false);
        if (activeProject == null) {
            return;
        }
        tool.setActiveProject(activeProject);
        RepositoryAdapter repository = activeProject.getRepository();
        if (repository != null && !repository.isConnected()) {
            Msg.showInfo(GhidraRun.class, null, "Working Off-Line ", "Even though you are not connected to the Ghidra Server,\n" + "you can still work off-line on checked out files or private files.\n" + "You can also try reconnecting to the server by selecting the connect\n" + "button on the Ghidra Project Window.\n \n" + "See the Ghidra Help topic 'Project Repository' for troubleshooting\n" + "a failed connection.");
        }
    } catch (Throwable t) {
        if (t instanceof UsrException) {
            if (t instanceof LockException) {
                Msg.showInfo(GhidraRun.class, null, "Project is Locked", "Can't open project: " + projectLocator.toString() + "\nProject is already locked");
            } else {
                Msg.showInfo(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage());
            }
        } else {
            Msg.showError(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage(), t);
        }
        tool.setActiveProject(null);
    }
}
07:04:2024 - 14:06:46.612 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showError(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage(), t)
07:04:2024 - 14:06:46.612 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.toString()
07:04:2024 - 14:06:46.613 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass().getSimpleName()
07:04:2024 - 14:06:46.613 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass()
07:04:2024 - 14:06:46.613 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getMessage()
07:04:2024 - 14:06:46.613 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage())
07:04:2024 - 14:06:46.613 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.toString()
07:04:2024 - 14:06:46.613 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass().getSimpleName()
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass()
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getMessage()
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Project is Locked", "Can't open project: " + projectLocator.toString() + "\nProject is already locked")
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.toString()
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.setActiveProject(null)
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.getProjectManager()
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: pm.openProject(projectLocator, true, false)
07:04:2024 - 14:06:46.614 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.setActiveProject(activeProject)
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call inside Method: activeProject.getRepository()
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call inside Method: repository.isConnected()
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Working Off-Line ", "Even though you are not connected to the Ghidra Server,\n" + "you can still work off-line on checked out files or private files.\n" + "You can also try reconnecting to the server by selecting the connect\n" + "button on the Ghidra Project Window.\n \n" + "See the Ghidra Help topic 'Project Repository' for troubleshooting\n" + "a failed connection.")
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call: Msg.showError(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage(), t)
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call: projectLocator.toString()
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call: t.getClass().getSimpleName()
07:04:2024 - 14:06:46.615 TRACE logPackage.LogReader [main] - Method Call: t.getClass()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: t.getMessage()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage())
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: projectLocator.toString()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: t.getClass().getSimpleName()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: t.getClass()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: t.getMessage()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Project is Locked", "Can't open project: " + projectLocator.toString() + "\nProject is already locked")
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: projectLocator.toString()
07:04:2024 - 14:06:46.616 TRACE logPackage.LogReader [main] - Method Call: tool.setActiveProject(null)
07:04:2024 - 14:06:46.617 DEBUG logPackage.LogReader [main] - Variable Declaration: pm
07:04:2024 - 14:06:46.617 TRACE logPackage.LogReader [main] - Method Call: tool.getProjectManager()
07:04:2024 - 14:06:46.617 DEBUG logPackage.LogReader [main] - Variable Declaration: activeProject
07:04:2024 - 14:06:46.617 TRACE logPackage.LogReader [main] - Method Call: pm.openProject(projectLocator, true, false)
07:04:2024 - 14:06:46.617 TRACE logPackage.LogReader [main] - Method Call: tool.setActiveProject(activeProject)
07:04:2024 - 14:06:46.617 DEBUG logPackage.LogReader [main] - Variable Declaration: repository
07:04:2024 - 14:06:46.617 TRACE logPackage.LogReader [main] - Method Call: activeProject.getRepository()
07:04:2024 - 14:06:46.617 TRACE logPackage.LogReader [main] - Method Call: repository.isConnected()
07:04:2024 - 14:06:46.617 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Working Off-Line ", "Even though you are not connected to the Ghidra Server,\n" + "you can still work off-line on checked out files or private files.\n" + "You can also try reconnecting to the server by selecting the connect\n" + "button on the Ghidra Project Window.\n \n" + "See the Ghidra Help topic 'Project Repository' for troubleshooting\n" + "a failed connection.")
07:04:2024 - 14:06:46.621 TRACE logPackage.LogReader [main] - Method Call: Thread.currentThread().getThreadGroup()
07:04:2024 - 14:06:46.621 TRACE logPackage.LogReader [main] - Method Call: Thread.currentThread()
07:04:2024 - 14:06:46.621 INFO logPackage.LogReader [main] - Method Declaration: void uncaughtException(Thread, Throwable)
07:04:2024 - 14:06:46.621 INFO logPackage.LogReader [main] - Method Content: {
    handleUncaughtException(e);
}
07:04:2024 - 14:06:46.621 TRACE logPackage.LogReader [main] - Method Call inside Method: handleUncaughtException(e)
07:04:2024 - 14:06:46.621 TRACE logPackage.LogReader [main] - Method Call: handleUncaughtException(e)
07:04:2024 - 14:06:46.621 INFO logPackage.LogReader [main] - Method Declaration: void handleUncaughtException(Throwable)
07:04:2024 - 14:06:46.622 INFO logPackage.LogReader [main] - Method Content: {
    if (t instanceof DomainObjectException) {
        t = t.getCause();
    }
    if (t instanceof TerminatedTransactionException) {
        Msg.showError(GhidraThreadGroup.class, null, "Terminated Transaction", "Transaction has been terminated!\n \n" + "All open transactions must be closed before a new transaction will be allowed.\n" + "Try cancelling all long running tasks.\n \n" + "Note that this error may be repeated until all running tasks are terminated.");
        return;
    }
    if (t instanceof DomainObjectLockedException) {
        Msg.showError(GhidraThreadGroup.class, null, "Transaction Not Allowed", t.getMessage() + "\n \n" + "No modifications are permitted until the locking process has completed.");
        return;
    }
    // pass up for more generic exception handling
    SwingExceptionHandler.handleUncaughtException(t);
}
07:04:2024 - 14:06:46.622 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getCause()
07:04:2024 - 14:06:46.622 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showError(GhidraThreadGroup.class, null, "Terminated Transaction", "Transaction has been terminated!\n \n" + "All open transactions must be closed before a new transaction will be allowed.\n" + "Try cancelling all long running tasks.\n \n" + "Note that this error may be repeated until all running tasks are terminated.")
07:04:2024 - 14:06:46.622 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showError(GhidraThreadGroup.class, null, "Transaction Not Allowed", t.getMessage() + "\n \n" + "No modifications are permitted until the locking process has completed.")
07:04:2024 - 14:06:46.622 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getMessage()
07:04:2024 - 14:06:46.622 TRACE logPackage.LogReader [main] - Method Call inside Method: SwingExceptionHandler.handleUncaughtException(t)
07:04:2024 - 14:06:46.622 TRACE logPackage.LogReader [main] - Method Call: t.getCause()
07:04:2024 - 14:06:46.623 TRACE logPackage.LogReader [main] - Method Call: Msg.showError(GhidraThreadGroup.class, null, "Terminated Transaction", "Transaction has been terminated!\n \n" + "All open transactions must be closed before a new transaction will be allowed.\n" + "Try cancelling all long running tasks.\n \n" + "Note that this error may be repeated until all running tasks are terminated.")
07:04:2024 - 14:06:46.623 TRACE logPackage.LogReader [main] - Method Call: Msg.showError(GhidraThreadGroup.class, null, "Transaction Not Allowed", t.getMessage() + "\n \n" + "No modifications are permitted until the locking process has completed.")
07:04:2024 - 14:06:46.623 TRACE logPackage.LogReader [main] - Method Call: t.getMessage()
07:04:2024 - 14:06:46.623 TRACE logPackage.LogReader [main] - Method Call: SwingExceptionHandler.handleUncaughtException(t)
07:04:2024 - 14:06:46.629 INFO logPackage.LogReader [main] - Method Declaration: void main(String[])
07:04:2024 - 14:06:46.630 INFO logPackage.LogReader [main] - Method Content: {
    if (args.length == 0) {
        usage();
    }
    GhidraApplicationLayout layout = new GhidraJarApplicationLayout();
    if ("-gui".equals(args[0])) {
        new GhidraRun().launch(layout, removeArgs(args, 1));
    } else {
        new AnalyzeHeadless().launch(layout, args);
    }
}
07:04:2024 - 14:06:46.630 TRACE logPackage.LogReader [main] - Method Call inside Method: usage()
07:04:2024 - 14:06:46.630 TRACE logPackage.LogReader [main] - Method Call inside Method: "-gui".equals(args[0])
07:04:2024 - 14:06:46.630 TRACE logPackage.LogReader [main] - Method Call inside Method: new AnalyzeHeadless().launch(layout, args)
07:04:2024 - 14:06:46.630 TRACE logPackage.LogReader [main] - Method Call inside Method: new GhidraRun().launch(layout, removeArgs(args, 1))
07:04:2024 - 14:06:46.630 TRACE logPackage.LogReader [main] - Method Call inside Method: removeArgs(args, 1)
07:04:2024 - 14:06:46.631 TRACE logPackage.LogReader [main] - Method Call: usage()
07:04:2024 - 14:06:46.631 DEBUG logPackage.LogReader [main] - Variable Declaration: layout
07:04:2024 - 14:06:46.631 TRACE logPackage.LogReader [main] - Method Call: "-gui".equals(args[0])
07:04:2024 - 14:06:46.631 TRACE logPackage.LogReader [main] - Method Call: new AnalyzeHeadless().launch(layout, args)
07:04:2024 - 14:06:46.631 TRACE logPackage.LogReader [main] - Method Call: new GhidraRun().launch(layout, removeArgs(args, 1))
07:04:2024 - 14:06:46.631 TRACE logPackage.LogReader [main] - Method Call: removeArgs(args, 1)
07:04:2024 - 14:06:46.631 INFO logPackage.LogReader [main] - Method Declaration: String[] removeArgs(String[], int)
07:04:2024 - 14:06:46.632 INFO logPackage.LogReader [main] - Method Content: {
    String[] newArgs = new String[Math.max(0, args.length - removalCount)];
    if (newArgs.length != 0) {
        System.arraycopy(args, removalCount, newArgs, 0, newArgs.length);
    }
    return newArgs;
}
07:04:2024 - 14:06:46.632 TRACE logPackage.LogReader [main] - Method Call inside Method: Math.max(0, args.length - removalCount)
07:04:2024 - 14:06:46.632 TRACE logPackage.LogReader [main] - Method Call inside Method: System.arraycopy(args, removalCount, newArgs, 0, newArgs.length)
07:04:2024 - 14:06:46.632 DEBUG logPackage.LogReader [main] - Variable Declaration: newArgs
07:04:2024 - 14:06:46.632 TRACE logPackage.LogReader [main] - Method Call: Math.max(0, args.length - removalCount)
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call: System.arraycopy(args, removalCount, newArgs, 0, newArgs.length)
07:04:2024 - 14:06:46.633 INFO logPackage.LogReader [main] - Method Declaration: void usage()
07:04:2024 - 14:06:46.633 INFO logPackage.LogReader [main] - Method Content: {
    System.out.println("Ghidra GUI Usage:  java -jar <ghidra.jar> -gui [<ghidra-project-file>]");
    AnalyzeHeadless.usage("java -jar <ghidra.jar>");
    System.exit(1);
}
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call inside Method: System.out.println("Ghidra GUI Usage:  java -jar <ghidra.jar> -gui [<ghidra-project-file>]")
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call inside Method: AnalyzeHeadless.usage("java -jar <ghidra.jar>")
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call inside Method: System.exit(1)
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call: System.out.println("Ghidra GUI Usage:  java -jar <ghidra.jar> -gui [<ghidra-project-file>]")
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call: AnalyzeHeadless.usage("java -jar <ghidra.jar>")
07:04:2024 - 14:06:46.633 TRACE logPackage.LogReader [main] - Method Call: System.exit(1)
