11:06:2024 - 14:55:41.525 INFO logPackage.LogReader [main] - Method Declaration: int getMouseEventID()
11:06:2024 - 14:55:41.532 INFO logPackage.LogReader [main] - Method Content: {
    return mouseEventID;
}
11:06:2024 - 14:55:41.571 DEBUG logPackage.LogReader [main] - Logger Variable Declaration: log
11:06:2024 - 14:55:41.572 INFO logPackage.LogReader [main] - Method Declaration: void launch(GhidraApplicationLayout, String[])
11:06:2024 - 14:55:41.581 INFO logPackage.LogReader [main] - Method Content: {
    Runnable mainTask = () -> {
        GhidraApplicationConfiguration configuration = new GhidraApplicationConfiguration();
        Application.initializeApplication(layout, configuration);
        log = LogManager.getLogger(GhidraRun.class);
        log.info("User " + SystemUtilities.getUserName() + " started Ghidra.");
        log.info("User settings directory: " + Application.getUserSettingsDirectory());
        log.info("User temp directory: " + Application.getUserTempDirectory());
        log.info("User cache directory: " + Application.getUserCacheDirectory());
        initializeTooltips();
        updateSplashScreenStatusMessage("Populating Ghidra help...");
        GhidraHelpService.install();
        ExtensionUtils.initializeExtensions();
        updateSplashScreenStatusMessage("Checking for previous project...");
        SystemUtilities.runSwingLater(() -> {
            String projectPath = processArguments(args);
            openProject(projectPath);
        });
    };
    // Start main thread in GhidraThreadGroup
    Thread mainThread = new Thread(new GhidraThreadGroup(), mainTask, "Ghidra");
    mainThread.start();
}
11:06:2024 - 14:55:41.582 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.initializeApplication(layout, configuration)
11:06:2024 - 14:55:41.582 TRACE logPackage.LogReader [main] - Method Call inside Method: LogManager.getLogger(GhidraRun.class)
11:06:2024 - 14:55:41.582 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User " + SystemUtilities.getUserName() + " started Ghidra.")
11:06:2024 - 14:55:41.582 TRACE logPackage.LogReader [main] - Method Call inside Method: SystemUtilities.getUserName()
11:06:2024 - 14:55:41.582 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User settings directory: " + Application.getUserSettingsDirectory())
11:06:2024 - 14:55:41.582 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.getUserSettingsDirectory()
11:06:2024 - 14:55:41.583 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User temp directory: " + Application.getUserTempDirectory())
11:06:2024 - 14:55:41.583 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.getUserTempDirectory()
11:06:2024 - 14:55:41.583 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("User cache directory: " + Application.getUserCacheDirectory())
11:06:2024 - 14:55:41.583 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.getUserCacheDirectory()
11:06:2024 - 14:55:41.583 TRACE logPackage.LogReader [main] - Method Call inside Method: initializeTooltips()
11:06:2024 - 14:55:41.583 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Populating Ghidra help...")
11:06:2024 - 14:55:41.584 TRACE logPackage.LogReader [main] - Method Call inside Method: GhidraHelpService.install()
11:06:2024 - 14:55:41.584 TRACE logPackage.LogReader [main] - Method Call inside Method: ExtensionUtils.initializeExtensions()
11:06:2024 - 14:55:41.584 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Checking for previous project...")
11:06:2024 - 14:55:41.584 TRACE logPackage.LogReader [main] - Method Call inside Method: SystemUtilities.runSwingLater(() -> {
    String projectPath = processArguments(args);
    openProject(projectPath);
})
11:06:2024 - 14:55:41.584 TRACE logPackage.LogReader [main] - Method Call inside Method: processArguments(args)
11:06:2024 - 14:55:41.585 TRACE logPackage.LogReader [main] - Method Call inside Method: openProject(projectPath)
11:06:2024 - 14:55:41.585 TRACE logPackage.LogReader [main] - Method Call inside Method: mainThread.start()
11:06:2024 - 14:55:41.586 DEBUG logPackage.LogReader [main] - Logger Variable Declaration: mainTask
11:06:2024 - 14:55:41.586 TRACE logPackage.LogReader [main] - Method Call: Application.initializeApplication(layout, configuration)
11:06:2024 - 14:55:41.586 TRACE logPackage.LogReader [main] - Method Call: LogManager.getLogger(GhidraRun.class)
11:06:2024 - 14:55:41.586 TRACE logPackage.LogReader [main] - Method Call: log.info("User " + SystemUtilities.getUserName() + " started Ghidra.")
11:06:2024 - 14:55:41.586 TRACE logPackage.LogReader [main] - Method Call: SystemUtilities.getUserName()
11:06:2024 - 14:55:41.587 TRACE logPackage.LogReader [main] - Method Call: log.info("User settings directory: " + Application.getUserSettingsDirectory())
11:06:2024 - 14:55:41.587 TRACE logPackage.LogReader [main] - Method Call: Application.getUserSettingsDirectory()
11:06:2024 - 14:55:41.587 TRACE logPackage.LogReader [main] - Method Call: log.info("User temp directory: " + Application.getUserTempDirectory())
11:06:2024 - 14:55:41.587 TRACE logPackage.LogReader [main] - Method Call: Application.getUserTempDirectory()
11:06:2024 - 14:55:41.587 TRACE logPackage.LogReader [main] - Method Call: log.info("User cache directory: " + Application.getUserCacheDirectory())
11:06:2024 - 14:55:41.587 TRACE logPackage.LogReader [main] - Method Call: Application.getUserCacheDirectory()
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: initializeTooltips()
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Populating Ghidra help...")
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: GhidraHelpService.install()
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: ExtensionUtils.initializeExtensions()
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Checking for previous project...")
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: SystemUtilities.runSwingLater(() -> {
    String projectPath = processArguments(args);
    openProject(projectPath);
})
11:06:2024 - 14:55:41.588 TRACE logPackage.LogReader [main] - Method Call: processArguments(args)
11:06:2024 - 14:55:41.589 TRACE logPackage.LogReader [main] - Method Call: openProject(projectPath)
11:06:2024 - 14:55:41.589 TRACE logPackage.LogReader [main] - Method Call: mainThread.start()
11:06:2024 - 14:55:41.589 INFO logPackage.LogReader [main] - Method Declaration: String processArguments(String[])
11:06:2024 - 14:55:41.590 INFO logPackage.LogReader [main] - Method Content: {
    //TODO remove this special handling when possible
    if (args.length == 1 && (args[0].startsWith("-D") || args[0].indexOf(" -D") >= 0)) {
        args = args[0].split(" ");
    }
    String projectPath = null;
    for (String arg : args) {
        if (arg.startsWith("-D")) {
            String[] split = arg.substring(2).split("=");
            if (split.length == 2) {
                System.setProperty(split[0], split[1]);
            }
        } else {
            projectPath = arg;
        }
    }
    return projectPath;
}
11:06:2024 - 14:55:41.591 TRACE logPackage.LogReader [main] - Method Call inside Method: args[0].startsWith("-D")
11:06:2024 - 14:55:41.591 TRACE logPackage.LogReader [main] - Method Call inside Method: args[0].indexOf(" -D")
11:06:2024 - 14:55:41.591 TRACE logPackage.LogReader [main] - Method Call inside Method: args[0].split(" ")
11:06:2024 - 14:55:41.591 TRACE logPackage.LogReader [main] - Method Call inside Method: arg.startsWith("-D")
11:06:2024 - 14:55:41.591 TRACE logPackage.LogReader [main] - Method Call inside Method: arg.substring(2).split("=")
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call inside Method: arg.substring(2)
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call inside Method: System.setProperty(split[0], split[1])
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call: args[0].startsWith("-D")
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call: args[0].indexOf(" -D")
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call: args[0].split(" ")
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call: arg.startsWith("-D")
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call: arg.substring(2).split("=")
11:06:2024 - 14:55:41.592 TRACE logPackage.LogReader [main] - Method Call: arg.substring(2)
11:06:2024 - 14:55:41.593 TRACE logPackage.LogReader [main] - Method Call: System.setProperty(split[0], split[1])
11:06:2024 - 14:55:41.593 INFO logPackage.LogReader [main] - Method Declaration: void updateSplashScreenStatusMessage(String)
11:06:2024 - 14:55:41.593 INFO logPackage.LogReader [main] - Method Content: {
    SystemUtilities.runSwingNow(() -> SplashScreen.updateSplashScreenStatus(message));
}
11:06:2024 - 14:55:41.593 TRACE logPackage.LogReader [main] - Method Call inside Method: SystemUtilities.runSwingNow(() -> SplashScreen.updateSplashScreenStatus(message))
11:06:2024 - 14:55:41.593 TRACE logPackage.LogReader [main] - Method Call inside Method: SplashScreen.updateSplashScreenStatus(message)
11:06:2024 - 14:55:41.593 TRACE logPackage.LogReader [main] - Method Call: SystemUtilities.runSwingNow(() -> SplashScreen.updateSplashScreenStatus(message))
11:06:2024 - 14:55:41.593 TRACE logPackage.LogReader [main] - Method Call: SplashScreen.updateSplashScreenStatus(message)
11:06:2024 - 14:55:41.594 INFO logPackage.LogReader [main] - Method Declaration: void initializeTooltips()
11:06:2024 - 14:55:41.594 INFO logPackage.LogReader [main] - Method Content: {
    int currentDelay = ToolTipManager.sharedInstance().getDismissDelay();
    ToolTipManager.sharedInstance().setDismissDelay(currentDelay * 2);
}
11:06:2024 - 14:55:41.594 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance().getDismissDelay()
11:06:2024 - 14:55:41.594 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance()
11:06:2024 - 14:55:41.594 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance().setDismissDelay(currentDelay * 2)
11:06:2024 - 14:55:41.594 TRACE logPackage.LogReader [main] - Method Call inside Method: ToolTipManager.sharedInstance()
11:06:2024 - 14:55:41.595 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance().getDismissDelay()
11:06:2024 - 14:55:41.595 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance()
11:06:2024 - 14:55:41.595 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance().setDismissDelay(currentDelay * 2)
11:06:2024 - 14:55:41.595 TRACE logPackage.LogReader [main] - Method Call: ToolTipManager.sharedInstance()
11:06:2024 - 14:55:41.595 INFO logPackage.LogReader [main] - Method Declaration: void openProject(String)
11:06:2024 - 14:55:41.596 INFO logPackage.LogReader [main] - Method Content: {
    updateSplashScreenStatusMessage("Creating project manager...");
    ProjectManager pm = new GhidraProjectManager();
    updateSplashScreenStatusMessage("Creating front end tool...");
    // Show this warning before creating the tool.   If we create the tool first, then we may
    // see odd dialog behavior caused tool plugins creating dialogs during initialization.
    if (Application.isTestBuild()) {
        Msg.showWarn(GhidraRun.class, null, "Unsupported Ghidra Distribution", "WARNING! Please be aware that this is an unsupported and uncertified\n" + "build of Ghidra!  This software may be unstable and data created\n" + "may be incompatible with future releases.");
    }
    FrontEndTool tool = new FrontEndTool(pm);
    boolean reopen = true;
    ProjectLocator projectLocator = null;
    if (projectPath != null) {
        File projectFile = new File(projectPath);
        String name = projectFile.getName();
        if (!name.endsWith(ProjectLocator.getProjectExtension())) {
            Msg.showInfo(GhidraRun.class, null, "Invalid Project", "The specified file is not a project file: " + projectPath);
        } else {
            projectLocator = new ProjectLocator(projectFile.getParent(), name);
            reopen = false;
        }
    }
    if (projectLocator == null && tool.shouldRestorePreviousProject()) {
        updateSplashScreenStatusMessage("Checking for last opened project...");
        projectLocator = pm.getLastOpenedProject();
    }
    tool.setVisible(true);
    if (projectLocator != null) {
        openProject(tool, projectLocator, reopen);
    }
}
11:06:2024 - 14:55:41.597 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Creating project manager...")
11:06:2024 - 14:55:41.597 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Creating front end tool...")
11:06:2024 - 14:55:41.597 TRACE logPackage.LogReader [main] - Method Call inside Method: Application.isTestBuild()
11:06:2024 - 14:55:41.597 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showWarn(GhidraRun.class, null, "Unsupported Ghidra Distribution", "WARNING! Please be aware that this is an unsupported and uncertified\n" + "build of Ghidra!  This software may be unstable and data created\n" + "may be incompatible with future releases.")
11:06:2024 - 14:55:41.597 TRACE logPackage.LogReader [main] - Method Call inside Method: projectFile.getName()
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: name.endsWith(ProjectLocator.getProjectExtension())
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: ProjectLocator.getProjectExtension()
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: projectFile.getParent()
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Invalid Project", "The specified file is not a project file: " + projectPath)
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.shouldRestorePreviousProject()
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: updateSplashScreenStatusMessage("Checking for last opened project...")
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: pm.getLastOpenedProject()
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.setVisible(true)
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call inside Method: openProject(tool, projectLocator, reopen)
11:06:2024 - 14:55:41.598 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Creating project manager...")
11:06:2024 - 14:55:41.599 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Creating front end tool...")
11:06:2024 - 14:55:41.599 TRACE logPackage.LogReader [main] - Method Call: Application.isTestBuild()
11:06:2024 - 14:55:41.599 TRACE logPackage.LogReader [main] - Method Call: Msg.showWarn(GhidraRun.class, null, "Unsupported Ghidra Distribution", "WARNING! Please be aware that this is an unsupported and uncertified\n" + "build of Ghidra!  This software may be unstable and data created\n" + "may be incompatible with future releases.")
11:06:2024 - 14:55:41.599 TRACE logPackage.LogReader [main] - Method Call: projectFile.getName()
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: name.endsWith(ProjectLocator.getProjectExtension())
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: ProjectLocator.getProjectExtension()
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: projectFile.getParent()
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Invalid Project", "The specified file is not a project file: " + projectPath)
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: tool.shouldRestorePreviousProject()
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: updateSplashScreenStatusMessage("Checking for last opened project...")
11:06:2024 - 14:55:41.600 TRACE logPackage.LogReader [main] - Method Call: pm.getLastOpenedProject()
11:06:2024 - 14:55:41.601 TRACE logPackage.LogReader [main] - Method Call: tool.setVisible(true)
11:06:2024 - 14:55:41.601 TRACE logPackage.LogReader [main] - Method Call: openProject(tool, projectLocator, reopen)
11:06:2024 - 14:55:41.601 INFO logPackage.LogReader [main] - Method Declaration: void openProject(FrontEndTool, ProjectLocator, boolean)
11:06:2024 - 14:55:41.602 INFO logPackage.LogReader [main] - Method Content: {
    SplashScreen.updateSplashScreenStatus((reopen ? "Reopening" : "Opening") + " project: " + projectLocator.getName());
    Runnable r = () -> doOpenProject(tool, projectLocator, reopen);
    TaskLauncher.launchModal("Opening Project", () -> Swing.runNow(r));
}
11:06:2024 - 14:55:41.602 TRACE logPackage.LogReader [main] - Method Call inside Method: SplashScreen.updateSplashScreenStatus((reopen ? "Reopening" : "Opening") + " project: " + projectLocator.getName())
11:06:2024 - 14:55:41.602 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.getName()
11:06:2024 - 14:55:41.602 TRACE logPackage.LogReader [main] - Method Call inside Method: doOpenProject(tool, projectLocator, reopen)
11:06:2024 - 14:55:41.602 TRACE logPackage.LogReader [main] - Method Call inside Method: TaskLauncher.launchModal("Opening Project", () -> Swing.runNow(r))
11:06:2024 - 14:55:41.602 TRACE logPackage.LogReader [main] - Method Call inside Method: Swing.runNow(r)
11:06:2024 - 14:55:41.603 TRACE logPackage.LogReader [main] - Method Call: SplashScreen.updateSplashScreenStatus((reopen ? "Reopening" : "Opening") + " project: " + projectLocator.getName())
11:06:2024 - 14:55:41.603 TRACE logPackage.LogReader [main] - Method Call: projectLocator.getName()
11:06:2024 - 14:55:41.603 TRACE logPackage.LogReader [main] - Method Call: doOpenProject(tool, projectLocator, reopen)
11:06:2024 - 14:55:41.603 TRACE logPackage.LogReader [main] - Method Call: TaskLauncher.launchModal("Opening Project", () -> Swing.runNow(r))
11:06:2024 - 14:55:41.603 TRACE logPackage.LogReader [main] - Method Call: Swing.runNow(r)
11:06:2024 - 14:55:41.603 INFO logPackage.LogReader [main] - Method Declaration: void doOpenProject(FrontEndTool, ProjectLocator, boolean)
11:06:2024 - 14:55:41.604 INFO logPackage.LogReader [main] - Method Content: {
    try {
        ProjectManager pm = tool.getProjectManager();
        Project activeProject = pm.openProject(projectLocator, true, false);
        if (activeProject == null) {
            return;
        }
        tool.setActiveProject(activeProject);
        RepositoryAdapter repository = activeProject.getRepository();
        if (repository != null && !repository.isConnected()) {
            Msg.showInfo(GhidraRun.class, null, "Working Off-Line ", "Even though you are not connected to the Ghidra Server,\n" + "you can still work off-line on checked out files or private files.\n" + "You can also try reconnecting to the server by selecting the connect\n" + "button on the Ghidra Project Window.\n \n" + "See the Ghidra Help topic 'Project Repository' for troubleshooting\n" + "a failed connection.");
        }
    } catch (Throwable t) {
        if (t instanceof UsrException) {
            if (t instanceof LockException) {
                Msg.showInfo(GhidraRun.class, null, "Project is Locked", "Can't open project: " + projectLocator.toString() + "\nProject is already locked");
            } else {
                Msg.showInfo(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage());
            }
        } else {
            Msg.showError(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage(), t);
        }
        tool.setActiveProject(null);
    }
}
11:06:2024 - 14:55:41.605 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showError(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage(), t)
11:06:2024 - 14:55:41.605 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.toString()
11:06:2024 - 14:55:41.605 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass().getSimpleName()
11:06:2024 - 14:55:41.605 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass()
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getMessage()
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage())
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.toString()
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass().getSimpleName()
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getClass()
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getMessage()
11:06:2024 - 14:55:41.606 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Project is Locked", "Can't open project: " + projectLocator.toString() + "\nProject is already locked")
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: projectLocator.toString()
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.setActiveProject(null)
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.getProjectManager()
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: pm.openProject(projectLocator, true, false)
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: tool.setActiveProject(activeProject)
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: activeProject.getRepository()
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: repository.isConnected()
11:06:2024 - 14:55:41.607 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showInfo(GhidraRun.class, null, "Working Off-Line ", "Even though you are not connected to the Ghidra Server,\n" + "you can still work off-line on checked out files or private files.\n" + "You can also try reconnecting to the server by selecting the connect\n" + "button on the Ghidra Project Window.\n \n" + "See the Ghidra Help topic 'Project Repository' for troubleshooting\n" + "a failed connection.")
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: Msg.showError(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage(), t)
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: projectLocator.toString()
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: t.getClass().getSimpleName()
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: t.getClass()
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: t.getMessage()
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Project Open Failed", "Failed to " + (reopen ? "reopen last" : "open") + " project: " + projectLocator.toString() + "\n\n" + t.getClass().getSimpleName() + ": " + t.getMessage())
11:06:2024 - 14:55:41.608 TRACE logPackage.LogReader [main] - Method Call: projectLocator.toString()
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: t.getClass().getSimpleName()
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: t.getClass()
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: t.getMessage()
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Project is Locked", "Can't open project: " + projectLocator.toString() + "\nProject is already locked")
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: projectLocator.toString()
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: tool.setActiveProject(null)
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: tool.getProjectManager()
11:06:2024 - 14:55:41.609 TRACE logPackage.LogReader [main] - Method Call: pm.openProject(projectLocator, true, false)
11:06:2024 - 14:55:41.610 TRACE logPackage.LogReader [main] - Method Call: tool.setActiveProject(activeProject)
11:06:2024 - 14:55:41.610 TRACE logPackage.LogReader [main] - Method Call: activeProject.getRepository()
11:06:2024 - 14:55:41.610 TRACE logPackage.LogReader [main] - Method Call: repository.isConnected()
11:06:2024 - 14:55:41.610 TRACE logPackage.LogReader [main] - Method Call: Msg.showInfo(GhidraRun.class, null, "Working Off-Line ", "Even though you are not connected to the Ghidra Server,\n" + "you can still work off-line on checked out files or private files.\n" + "You can also try reconnecting to the server by selecting the connect\n" + "button on the Ghidra Project Window.\n \n" + "See the Ghidra Help topic 'Project Repository' for troubleshooting\n" + "a failed connection.")
11:06:2024 - 14:55:41.613 TRACE logPackage.LogReader [main] - Method Call: Thread.currentThread().getThreadGroup()
11:06:2024 - 14:55:41.614 TRACE logPackage.LogReader [main] - Method Call: Thread.currentThread()
11:06:2024 - 14:55:41.614 INFO logPackage.LogReader [main] - Method Declaration: void uncaughtException(Thread, Throwable)
11:06:2024 - 14:55:41.614 INFO logPackage.LogReader [main] - Method Content: {
    handleUncaughtException(e);
}
11:06:2024 - 14:55:41.614 TRACE logPackage.LogReader [main] - Method Call inside Method: handleUncaughtException(e)
11:06:2024 - 14:55:41.614 TRACE logPackage.LogReader [main] - Method Call: handleUncaughtException(e)
11:06:2024 - 14:55:41.614 INFO logPackage.LogReader [main] - Method Declaration: void handleUncaughtException(Throwable)
11:06:2024 - 14:55:41.615 INFO logPackage.LogReader [main] - Method Content: {
    if (t instanceof DomainObjectException) {
        t = t.getCause();
    }
    if (t instanceof TerminatedTransactionException) {
        Msg.showError(GhidraThreadGroup.class, null, "Terminated Transaction", "Transaction has been terminated!\n \n" + "All open transactions must be closed before a new transaction will be allowed.\n" + "Try cancelling all long running tasks.\n \n" + "Note that this error may be repeated until all running tasks are terminated.");
        return;
    }
    if (t instanceof DomainObjectLockedException) {
        Msg.showError(GhidraThreadGroup.class, null, "Transaction Not Allowed", t.getMessage() + "\n \n" + "No modifications are permitted until the locking process has completed.");
        return;
    }
    // pass up for more generic exception handling
    SwingExceptionHandler.handleUncaughtException(t);
}
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getCause()
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showError(GhidraThreadGroup.class, null, "Terminated Transaction", "Transaction has been terminated!\n \n" + "All open transactions must be closed before a new transaction will be allowed.\n" + "Try cancelling all long running tasks.\n \n" + "Note that this error may be repeated until all running tasks are terminated.")
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call inside Method: Msg.showError(GhidraThreadGroup.class, null, "Transaction Not Allowed", t.getMessage() + "\n \n" + "No modifications are permitted until the locking process has completed.")
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call inside Method: t.getMessage()
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call inside Method: SwingExceptionHandler.handleUncaughtException(t)
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call: t.getCause()
11:06:2024 - 14:55:41.615 TRACE logPackage.LogReader [main] - Method Call: Msg.showError(GhidraThreadGroup.class, null, "Terminated Transaction", "Transaction has been terminated!\n \n" + "All open transactions must be closed before a new transaction will be allowed.\n" + "Try cancelling all long running tasks.\n \n" + "Note that this error may be repeated until all running tasks are terminated.")
11:06:2024 - 14:55:41.616 TRACE logPackage.LogReader [main] - Method Call: Msg.showError(GhidraThreadGroup.class, null, "Transaction Not Allowed", t.getMessage() + "\n \n" + "No modifications are permitted until the locking process has completed.")
11:06:2024 - 14:55:41.616 TRACE logPackage.LogReader [main] - Method Call: t.getMessage()
11:06:2024 - 14:55:41.616 TRACE logPackage.LogReader [main] - Method Call: SwingExceptionHandler.handleUncaughtException(t)
11:06:2024 - 14:55:41.626 INFO logPackage.LogReader [main] - Method Declaration: void main(String[])
11:06:2024 - 14:55:41.627 INFO logPackage.LogReader [main] - Method Content: {
    if (args.length == 0) {
        usage();
    }
    GhidraApplicationLayout layout = new GhidraJarApplicationLayout();
    if ("-gui".equals(args[0])) {
        new GhidraRun().launch(layout, removeArgs(args, 1));
    } else {
        new AnalyzeHeadless().launch(layout, args);
    }
}
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call inside Method: usage()
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call inside Method: "-gui".equals(args[0])
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call inside Method: new AnalyzeHeadless().launch(layout, args)
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call inside Method: new GhidraRun().launch(layout, removeArgs(args, 1))
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call inside Method: removeArgs(args, 1)
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call: usage()
11:06:2024 - 14:55:41.627 TRACE logPackage.LogReader [main] - Method Call: "-gui".equals(args[0])
11:06:2024 - 14:55:41.628 TRACE logPackage.LogReader [main] - Method Call: new AnalyzeHeadless().launch(layout, args)
11:06:2024 - 14:55:41.628 TRACE logPackage.LogReader [main] - Method Call: new GhidraRun().launch(layout, removeArgs(args, 1))
11:06:2024 - 14:55:41.628 TRACE logPackage.LogReader [main] - Method Call: removeArgs(args, 1)
11:06:2024 - 14:55:41.628 INFO logPackage.LogReader [main] - Method Declaration: String[] removeArgs(String[], int)
11:06:2024 - 14:55:41.628 INFO logPackage.LogReader [main] - Method Content: {
    String[] newArgs = new String[Math.max(0, args.length - removalCount)];
    if (newArgs.length != 0) {
        System.arraycopy(args, removalCount, newArgs, 0, newArgs.length);
    }
    return newArgs;
}
11:06:2024 - 14:55:41.628 TRACE logPackage.LogReader [main] - Method Call inside Method: Math.max(0, args.length - removalCount)
11:06:2024 - 14:55:41.629 TRACE logPackage.LogReader [main] - Method Call inside Method: System.arraycopy(args, removalCount, newArgs, 0, newArgs.length)
11:06:2024 - 14:55:41.629 TRACE logPackage.LogReader [main] - Method Call: Math.max(0, args.length - removalCount)
11:06:2024 - 14:55:41.629 TRACE logPackage.LogReader [main] - Method Call: System.arraycopy(args, removalCount, newArgs, 0, newArgs.length)
11:06:2024 - 14:55:41.629 INFO logPackage.LogReader [main] - Method Declaration: void usage()
11:06:2024 - 14:55:41.629 INFO logPackage.LogReader [main] - Method Content: {
    System.out.println("Ghidra GUI Usage:  java -jar <ghidra.jar> -gui [<ghidra-project-file>]");
    AnalyzeHeadless.usage("java -jar <ghidra.jar>");
    System.exit(1);
}
11:06:2024 - 14:55:41.629 TRACE logPackage.LogReader [main] - Method Call inside Method: System.out.println("Ghidra GUI Usage:  java -jar <ghidra.jar> -gui [<ghidra-project-file>]")
11:06:2024 - 14:55:41.630 TRACE logPackage.LogReader [main] - Method Call inside Method: AnalyzeHeadless.usage("java -jar <ghidra.jar>")
11:06:2024 - 14:55:41.630 TRACE logPackage.LogReader [main] - Method Call inside Method: System.exit(1)
11:06:2024 - 14:55:41.630 TRACE logPackage.LogReader [main] - Method Call: System.out.println("Ghidra GUI Usage:  java -jar <ghidra.jar> -gui [<ghidra-project-file>]")
11:06:2024 - 14:55:41.630 TRACE logPackage.LogReader [main] - Method Call: AnalyzeHeadless.usage("java -jar <ghidra.jar>")
11:06:2024 - 14:55:41.630 TRACE logPackage.LogReader [main] - Method Call: System.exit(1)
