2024-07-21 15:04:37.087 INFO  logPackage.LogReader [main] - Method Declaration: void main(String[])
2024-07-21 15:04:37.098 INFO  logPackage.LogReader [main] - Method Content: {
    System.setProperty("com.sun.net.ssl.checkRevocation", "true");
    Security.setProperty("ocsp.enable", "true");
    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init((KeyStore) null);
    strictTransportSecurity = new StrictTransportSecurity(new XBillDnsRecordClient(), new OkHttpsPolicyClient((X509TrustManager) trustManagerFactory.getTrustManagers()[0]));
    new Main(args);
}
2024-07-21 15:04:37.101 TRACE logPackage.LogReader [main] - Method Call inside Method: System.setProperty("com.sun.net.ssl.checkRevocation", "true")
2024-07-21 15:04:37.116 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.116 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.116 TRACE logPackage.LogReader [main] - Method Call inside Method: Security.setProperty("ocsp.enable", "true")
2024-07-21 15:04:37.116 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.116 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Method Call inside Method: TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Method Call inside Method: TrustManagerFactory.getDefaultAlgorithm()
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.117 TRACE logPackage.LogReader [main] - Method Call inside Method: trustManagerFactory.init((KeyStore) null)
2024-07-21 15:04:37.125 TRACE logPackage.LogReader [main] - Unique argument types: [java.security.KeyStore]
2024-07-21 15:04:37.125 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.126 TRACE logPackage.LogReader [main] - Method Call inside Method: trustManagerFactory.getTrustManagers()
2024-07-21 15:04:37.126 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.126 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.126 TRACE logPackage.LogReader [main] - Method Call: System.setProperty("com.sun.net.ssl.checkRevocation", "true")
2024-07-21 15:04:37.126 TRACE logPackage.LogReader [main] - Method Call: Security.setProperty("ocsp.enable", "true")
2024-07-21 15:04:37.126 TRACE logPackage.LogReader [main] - Method Call: TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())
2024-07-21 15:04:37.127 TRACE logPackage.LogReader [main] - Method Call: TrustManagerFactory.getDefaultAlgorithm()
2024-07-21 15:04:37.127 TRACE logPackage.LogReader [main] - Method Call: trustManagerFactory.init((KeyStore) null)
2024-07-21 15:04:37.127 TRACE logPackage.LogReader [main] - Method Call: trustManagerFactory.getTrustManagers()
2024-07-21 15:04:37.127 TRACE logPackage.LogReader [main] - Method Call: Configurator.setAllLevels(LogManager.getRootLogger().getName(), Level.OFF)
2024-07-21 15:04:37.127 TRACE logPackage.LogReader [main] - Method Call: LogManager.getRootLogger().getName()
2024-07-21 15:04:37.127 TRACE logPackage.LogReader [main] - Method Call: LogManager.getRootLogger()
2024-07-21 15:04:37.128 TRACE logPackage.LogReader [main] - Method Call: options()
2024-07-21 15:04:37.128 TRACE logPackage.LogReader [main] - Method Call: parseArgs(options, args)
2024-07-21 15:04:37.128 TRACE logPackage.LogReader [main] - Method Call: opt.isPresent()
2024-07-21 15:04:37.128 TRACE logPackage.LogReader [main] - Method Call: optionsUsage(options)
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: opt.get()
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: cmd.hasOption("domain")
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: optionsUsage(options)
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: cmd.getOptionValue("domain")
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: log("Ran into a problem: " + e.getMessage())
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: e.getMessage()
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: strictTransportSecurity.getPolicy(domain)
2024-07-21 15:04:37.129 TRACE logPackage.LogReader [main] - Method Call: optional.isPresent()
2024-07-21 15:04:37.130 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.130 TRACE logPackage.LogReader [main] - Method Call: cmd.hasOption("mx")
2024-07-21 15:04:37.130 TRACE logPackage.LogReader [main] - Method Call: log("Match MX")
2024-07-21 15:04:37.130 TRACE logPackage.LogReader [main] - Method Call: log("- - - - - - - - - - - - - - - - - - - - - - - - -")
2024-07-21 15:04:37.130 TRACE logPackage.LogReader [main] - Method Call: log("MX:\t\t" + cmd.getOptionValue("mx"))
2024-07-21 15:04:37.130 TRACE logPackage.LogReader [main] - Method Call: cmd.getOptionValue("mx")
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: log("Match:\t" + policy.matchMx(cmd.getOptionValue("mx")))
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: policy.matchMx(cmd.getOptionValue("mx"))
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: cmd.getOptionValue("mx")
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: log("- - - - - - - - - - - - - - - - - - - - - - - - -")
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: cmd.hasOption("json")
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: cmd.hasOption("file")
2024-07-21 15:04:37.131 TRACE logPackage.LogReader [main] - Method Call: getJson(policy)
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: cmd.hasOption("json")
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: new GsonBuilder().setPrettyPrinting().create()
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: new GsonBuilder().setPrettyPrinting()
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: log(gson.toJson(jsonMap))
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: gson.toJson(jsonMap)
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: cmd.hasOption("file")
2024-07-21 15:04:37.132 TRACE logPackage.LogReader [main] - Method Call: saveJson(jsonMap, cmd.getOptionValue("file"))
2024-07-21 15:04:37.133 TRACE logPackage.LogReader [main] - Method Call: cmd.getOptionValue("file")
2024-07-21 15:04:37.133 INFO  logPackage.LogReader [main] - Method Declaration: Map<String, Object> getJson(StsPolicy)
2024-07-21 15:04:37.140 INFO  logPackage.LogReader [main] - Method Content: {
    Map<String, Object> json = new HashMap<>();
    // MTA-STS Policy.
    Map<String, String> stsPolicy = new HashMap<>();
    stsPolicy.put("version", policy.getVersion());
    stsPolicy.put("mode", policy.getMode().toString());
    stsPolicy.put("mx", policy.getMxMasks().stream().map(String::valueOf).collect(Collectors.joining(", ")));
    stsPolicy.put("max_age", String.valueOf(policy.getMaxAge()));
    stsPolicy.put("valid", String.valueOf(policy.isValid()));
    json.put("stsPolicy", stsPolicy);
    // MTA-STS Record.
    Map<String, String> stsRecord = new HashMap<>();
    stsRecord.put("location", "_mta-sts." + policy.getRecord().getDomain());
    stsRecord.put("version", policy.getRecord().getVersion());
    stsRecord.put("id", policy.getRecord().getId());
    stsRecord.put("valid", String.valueOf(policy.getRecord().isValid()));
    json.put("stsRecord", stsRecord);
    // TLSRPT Record.
    Map<String, String> tlsRecord = new HashMap<>();
    tlsRecord.put("version", policy.getReport().getVersion());
    tlsRecord.put("rua", policy.getReport().getRua().stream().map(String::valueOf).collect(Collectors.joining(", ")));
    tlsRecord.put("valid", String.valueOf(policy.getReport().isValid()));
    json.put("tlsRecord", tlsRecord);
    // MX Records.
    List<Map<String, String>> mxList = new ArrayList<>();
    for (DnsRecord dnsRecord : strictTransportSecurity.getMxRecords(policy.getRecord().getDomain())) {
        Map<String, String> mx = new HashMap<>();
        mx.put("priority", String.valueOf(dnsRecord.getPriority()));
        mx.put("entry", dnsRecord.getName());
        mxList.add(mx);
    }
    json.put("mxList", mxList);
    // Peer certificate chain.
    if (policy.getPeerCertificates() != null) {
        List<Map<String, Object>> chain = new ArrayList<>();
        for (Certificate c : policy.getPeerCertificates()) {
            try {
                X509Certificate certificate = (X509Certificate) c;
                HashMap<String, Object> cert = new HashMap<>();
                cert.put("notBefore", certificate.getNotBefore());
                cert.put("notAfter", certificate.getNotAfter());
                cert.put("serialNumber", certificate.getSerialNumber());
                cert.put("algorithm", certificate.getSigAlgName());
                cert.put("type", certificate.getType());
                cert.put("version", certificate.getVersion());
                cert.put("subjectDName: ", certificate.getSubjectDN().getName());
                cert.put("subjectAlternativeNames", certificate.getSubjectAlternativeNames());
                cert.put("subjectKeyIdentifier", new String(Hex.encodeHex(certificate.getExtensionValue("2.5.29.14"))));
                cert.put("issuerDName", certificate.getIssuerDN().getName());
                cert.put("issuerKeyIdentifier", new String(Hex.encodeHex(certificate.getExtensionValue("2.5.29.19"))));
                chain.add(cert);
            } catch (CertificateParsingException e) {
                log("Error getting certificate details: " + e.getMessage());
            }
        }
        json.put("certificateChain", chain);
        // Warnings and errors.
        json.put("warnings", policy.getValidator().getWarnings());
        json.put("errors", policy.getValidator().getErrors());
    }
    return json;
}
2024-07-21 15:04:37.140 TRACE logPackage.LogReader [main] - Method Call inside Method: stsPolicy.put("version", policy.getVersion())
2024-07-21 15:04:37.140 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.140 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.140 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getVersion()
2024-07-21 15:04:37.140 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.140 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Method Call inside Method: stsPolicy.put("mode", policy.getMode().toString())
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMode().toString()
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMode()
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.141 TRACE logPackage.LogReader [main] - Method Call inside Method: stsPolicy.put("mx", policy.getMxMasks().stream().map(String::valueOf).collect(Collectors.joining(", ")))
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMxMasks().stream().map(String::valueOf).collect(Collectors.joining(", "))
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Method Call inside Method: Collectors.joining(", ")
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.142 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMxMasks().stream().map(String::valueOf)
2024-07-21 15:04:37.153 ERROR logPackage.LogReader [main] - Error resolving argument type for: String::valueOf
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol in policy.getMxMasks().stream().map(String::valueOf) : policy.getMxMasks().stream()
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.findTypeDeclarations(AbstractJavaParserContext.java:195) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethod(MethodCallExprContext.java:150) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(JavaParserFacade.java:273) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:594) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodReferenceExpr.accept(MethodReferenceExpr.java:93) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$102(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$101(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
Caused by: com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsPolicy
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.findTypeDeclarations(AbstractJavaParserContext.java:186) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	... 56 more
2024-07-21 15:04:37.163 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.163 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMxMasks().stream()
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMxMasks()
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Method Call inside Method: stsPolicy.put("max_age", String.valueOf(policy.getMaxAge()))
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Method Call inside Method: String.valueOf(policy.getMaxAge())
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.164 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getMaxAge()
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Method Call inside Method: stsPolicy.put("valid", String.valueOf(policy.isValid()))
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Method Call inside Method: String.valueOf(policy.isValid())
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.isValid()
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.165 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("stsPolicy", stsPolicy)
2024-07-21 15:04:37.170 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, java.util.Map<java.lang.String, java.lang.String>]
2024-07-21 15:04:37.170 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.170 TRACE logPackage.LogReader [main] - Method Call inside Method: stsRecord.put("location", "_mta-sts." + policy.getRecord().getDomain())
2024-07-21 15:04:37.173 ERROR logPackage.LogReader [main] - Error resolving argument type for: "_mta-sts." + policy.getRecord().getDomain()
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsPolicy
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getBinaryTypeConcrete(JavaParserFacade.java:451) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:140) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.BinaryExpr.accept(BinaryExpr.java:142) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved, java.lang.String]
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord().getDomain()
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord()
2024-07-21 15:04:37.174 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Method Call inside Method: stsRecord.put("version", policy.getRecord().getVersion())
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord().getVersion()
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord()
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Method Call inside Method: stsRecord.put("id", policy.getRecord().getId())
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord().getId()
2024-07-21 15:04:37.175 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord()
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Method Call inside Method: stsRecord.put("valid", String.valueOf(policy.getRecord().isValid()))
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Method Call inside Method: String.valueOf(policy.getRecord().isValid())
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord().isValid()
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord()
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.176 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.177 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("stsRecord", stsRecord)
2024-07-21 15:04:37.177 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, java.util.Map<java.lang.String, java.lang.String>]
2024-07-21 15:04:37.177 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.177 TRACE logPackage.LogReader [main] - Method Call inside Method: tlsRecord.put("version", policy.getReport().getVersion())
2024-07-21 15:04:37.177 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.177 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport().getVersion()
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport()
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Method Call inside Method: tlsRecord.put("rua", policy.getReport().getRua().stream().map(String::valueOf).collect(Collectors.joining(", ")))
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.178 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport().getRua().stream().map(String::valueOf).collect(Collectors.joining(", "))
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Method Call inside Method: Collectors.joining(", ")
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.179 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport().getRua().stream().map(String::valueOf)
2024-07-21 15:04:37.181 ERROR logPackage.LogReader [main] - Error resolving argument type for: String::valueOf
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol in policy.getReport().getRua().stream().map(String::valueOf) : policy.getReport().getRua().stream()
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.findTypeDeclarations(AbstractJavaParserContext.java:195) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethod(MethodCallExprContext.java:150) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(JavaParserFacade.java:273) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:594) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodReferenceExpr.accept(MethodReferenceExpr.java:93) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$102(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$101(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
Caused by: com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsPolicy
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethodAsUsage(MethodCallExprContext.java:102) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:656) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.findTypeDeclarations(AbstractJavaParserContext.java:186) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	... 56 more
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport().getRua().stream()
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport().getRua()
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.182 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport()
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Method Call inside Method: tlsRecord.put("valid", String.valueOf(policy.getReport().isValid()))
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Method Call inside Method: String.valueOf(policy.getReport().isValid())
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport().isValid()
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.183 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getReport()
2024-07-21 15:04:37.184 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.184 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.184 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("tlsRecord", tlsRecord)
2024-07-21 15:04:37.185 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, java.util.Map<java.lang.String, java.lang.String>]
2024-07-21 15:04:37.185 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.185 TRACE logPackage.LogReader [main] - Method Call inside Method: mx.put("priority", String.valueOf(dnsRecord.getPriority()))
2024-07-21 15:04:37.185 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.185 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.185 TRACE logPackage.LogReader [main] - Method Call inside Method: String.valueOf(dnsRecord.getPriority())
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Method Call inside Method: dnsRecord.getPriority()
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Method Call inside Method: mx.put("entry", dnsRecord.getName())
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Method Call inside Method: dnsRecord.getName()
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.186 TRACE logPackage.LogReader [main] - Method Call inside Method: mxList.add(mx)
2024-07-21 15:04:37.188 TRACE logPackage.LogReader [main] - Unique argument types: [java.util.Map<java.lang.String, java.lang.String>]
2024-07-21 15:04:37.188 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Method Call inside Method: strictTransportSecurity.getMxRecords(policy.getRecord().getDomain())
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord().getDomain()
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord()
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.189 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("mxList", mxList)
2024-07-21 15:04:37.191 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, java.util.List<java.util.Map<java.lang.String, java.lang.String>>]
2024-07-21 15:04:37.191 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.191 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getPeerCertificates()
2024-07-21 15:04:37.191 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.191 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.191 TRACE logPackage.LogReader [main] - Method Call inside Method: log("Error getting certificate details: " + e.getMessage())
2024-07-21 15:04:37.204 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.204 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.204 TRACE logPackage.LogReader [main] - Method Call inside Method: e.getMessage()
2024-07-21 15:04:37.204 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.204 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("notBefore", certificate.getNotBefore())
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getNotBefore()
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("notAfter", certificate.getNotAfter())
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getNotAfter()
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("serialNumber", certificate.getSerialNumber())
2024-07-21 15:04:37.205 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getSerialNumber()
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("algorithm", certificate.getSigAlgName())
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getSigAlgName()
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("type", certificate.getType())
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getType()
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.206 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("version", certificate.getVersion())
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getVersion()
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("subjectDName: ", certificate.getSubjectDN().getName())
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getSubjectDN().getName()
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getSubjectDN()
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("subjectAlternativeNames", certificate.getSubjectAlternativeNames())
2024-07-21 15:04:37.207 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.208 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.208 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getSubjectAlternativeNames()
2024-07-21 15:04:37.208 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.208 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.208 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("subjectKeyIdentifier", new String(Hex.encodeHex(certificate.getExtensionValue("2.5.29.14"))))
2024-07-21 15:04:37.209 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.209 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.209 TRACE logPackage.LogReader [main] - Method Call inside Method: Hex.encodeHex(certificate.getExtensionValue("2.5.29.14"))
2024-07-21 15:04:37.209 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.209 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.209 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getExtensionValue("2.5.29.14")
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("issuerDName", certificate.getIssuerDN().getName())
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getIssuerDN().getName()
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getIssuerDN()
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.210 TRACE logPackage.LogReader [main] - Method Call inside Method: cert.put("issuerKeyIdentifier", new String(Hex.encodeHex(certificate.getExtensionValue("2.5.29.19"))))
2024-07-21 15:04:37.211 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.211 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.211 TRACE logPackage.LogReader [main] - Method Call inside Method: Hex.encodeHex(certificate.getExtensionValue("2.5.29.19"))
2024-07-21 15:04:37.211 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.211 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.212 TRACE logPackage.LogReader [main] - Method Call inside Method: certificate.getExtensionValue("2.5.29.19")
2024-07-21 15:04:37.212 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.212 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.212 TRACE logPackage.LogReader [main] - Method Call inside Method: chain.add(cert)
2024-07-21 15:04:37.213 TRACE logPackage.LogReader [main] - Unique argument types: [java.util.HashMap<java.lang.String, java.lang.Object>]
2024-07-21 15:04:37.213 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.213 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getPeerCertificates()
2024-07-21 15:04:37.213 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.213 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.213 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("certificateChain", chain)
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Unique argument types: [java.util.List<java.util.Map<java.lang.String, java.lang.Object>>, java.lang.String]
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("warnings", policy.getValidator().getWarnings())
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getValidator().getWarnings()
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getValidator()
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Method Call inside Method: json.put("errors", policy.getValidator().getErrors())
2024-07-21 15:04:37.215 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String, MethodCall]
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getValidator().getErrors()
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getValidator()
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Method Call: stsPolicy.put("version", policy.getVersion())
2024-07-21 15:04:37.216 TRACE logPackage.LogReader [main] - Method Call: policy.getVersion()
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: stsPolicy.put("mode", policy.getMode().toString())
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: policy.getMode().toString()
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: policy.getMode()
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: stsPolicy.put("mx", policy.getMxMasks().stream().map(String::valueOf).collect(Collectors.joining(", ")))
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: policy.getMxMasks().stream().map(String::valueOf).collect(Collectors.joining(", "))
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: Collectors.joining(", ")
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: policy.getMxMasks().stream().map(String::valueOf)
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: policy.getMxMasks().stream()
2024-07-21 15:04:37.217 TRACE logPackage.LogReader [main] - Method Call: policy.getMxMasks()
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: stsPolicy.put("max_age", String.valueOf(policy.getMaxAge()))
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: String.valueOf(policy.getMaxAge())
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: policy.getMaxAge()
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: stsPolicy.put("valid", String.valueOf(policy.isValid()))
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: String.valueOf(policy.isValid())
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: policy.isValid()
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: json.put("stsPolicy", stsPolicy)
2024-07-21 15:04:37.218 TRACE logPackage.LogReader [main] - Method Call: stsRecord.put("location", "_mta-sts." + policy.getRecord().getDomain())
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord().getDomain()
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord()
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: stsRecord.put("version", policy.getRecord().getVersion())
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord().getVersion()
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord()
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: stsRecord.put("id", policy.getRecord().getId())
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord().getId()
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord()
2024-07-21 15:04:37.219 TRACE logPackage.LogReader [main] - Method Call: stsRecord.put("valid", String.valueOf(policy.getRecord().isValid()))
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: String.valueOf(policy.getRecord().isValid())
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord().isValid()
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord()
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: json.put("stsRecord", stsRecord)
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: tlsRecord.put("version", policy.getReport().getVersion())
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: policy.getReport().getVersion()
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: policy.getReport()
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: tlsRecord.put("rua", policy.getReport().getRua().stream().map(String::valueOf).collect(Collectors.joining(", ")))
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: policy.getReport().getRua().stream().map(String::valueOf).collect(Collectors.joining(", "))
2024-07-21 15:04:37.220 TRACE logPackage.LogReader [main] - Method Call: Collectors.joining(", ")
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: policy.getReport().getRua().stream().map(String::valueOf)
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: policy.getReport().getRua().stream()
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: policy.getReport().getRua()
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: policy.getReport()
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: tlsRecord.put("valid", String.valueOf(policy.getReport().isValid()))
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: String.valueOf(policy.getReport().isValid())
2024-07-21 15:04:37.221 TRACE logPackage.LogReader [main] - Method Call: policy.getReport().isValid()
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: policy.getReport()
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: json.put("tlsRecord", tlsRecord)
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: mx.put("priority", String.valueOf(dnsRecord.getPriority()))
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: String.valueOf(dnsRecord.getPriority())
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: dnsRecord.getPriority()
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: mx.put("entry", dnsRecord.getName())
2024-07-21 15:04:37.222 TRACE logPackage.LogReader [main] - Method Call: dnsRecord.getName()
2024-07-21 15:04:37.223 TRACE logPackage.LogReader [main] - Method Call: mxList.add(mx)
2024-07-21 15:04:37.223 TRACE logPackage.LogReader [main] - Method Call: strictTransportSecurity.getMxRecords(policy.getRecord().getDomain())
2024-07-21 15:04:37.223 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord().getDomain()
2024-07-21 15:04:37.223 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord()
2024-07-21 15:04:37.223 TRACE logPackage.LogReader [main] - Method Call: json.put("mxList", mxList)
2024-07-21 15:04:37.223 TRACE logPackage.LogReader [main] - Method Call: policy.getPeerCertificates()
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: log("Error getting certificate details: " + e.getMessage())
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: e.getMessage()
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: cert.put("notBefore", certificate.getNotBefore())
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: certificate.getNotBefore()
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: cert.put("notAfter", certificate.getNotAfter())
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: certificate.getNotAfter()
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: cert.put("serialNumber", certificate.getSerialNumber())
2024-07-21 15:04:37.224 TRACE logPackage.LogReader [main] - Method Call: certificate.getSerialNumber()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: cert.put("algorithm", certificate.getSigAlgName())
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: certificate.getSigAlgName()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: cert.put("type", certificate.getType())
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: certificate.getType()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: cert.put("version", certificate.getVersion())
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: certificate.getVersion()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: cert.put("subjectDName: ", certificate.getSubjectDN().getName())
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: certificate.getSubjectDN().getName()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: certificate.getSubjectDN()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: cert.put("subjectAlternativeNames", certificate.getSubjectAlternativeNames())
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: certificate.getSubjectAlternativeNames()
2024-07-21 15:04:37.225 TRACE logPackage.LogReader [main] - Method Call: cert.put("subjectKeyIdentifier", new String(Hex.encodeHex(certificate.getExtensionValue("2.5.29.14"))))
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: Hex.encodeHex(certificate.getExtensionValue("2.5.29.14"))
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: certificate.getExtensionValue("2.5.29.14")
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: cert.put("issuerDName", certificate.getIssuerDN().getName())
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: certificate.getIssuerDN().getName()
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: certificate.getIssuerDN()
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: cert.put("issuerKeyIdentifier", new String(Hex.encodeHex(certificate.getExtensionValue("2.5.29.19"))))
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: Hex.encodeHex(certificate.getExtensionValue("2.5.29.19"))
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: certificate.getExtensionValue("2.5.29.19")
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: chain.add(cert)
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: policy.getPeerCertificates()
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: json.put("certificateChain", chain)
2024-07-21 15:04:37.226 TRACE logPackage.LogReader [main] - Method Call: json.put("warnings", policy.getValidator().getWarnings())
2024-07-21 15:04:37.227 TRACE logPackage.LogReader [main] - Method Call: policy.getValidator().getWarnings()
2024-07-21 15:04:37.227 TRACE logPackage.LogReader [main] - Method Call: policy.getValidator()
2024-07-21 15:04:37.227 TRACE logPackage.LogReader [main] - Method Call: json.put("errors", policy.getValidator().getErrors())
2024-07-21 15:04:37.227 TRACE logPackage.LogReader [main] - Method Call: policy.getValidator().getErrors()
2024-07-21 15:04:37.227 TRACE logPackage.LogReader [main] - Method Call: policy.getValidator()
2024-07-21 15:04:37.227 INFO  logPackage.LogReader [main] - Method Declaration: void saveJson(Map<String, Object>, String)
2024-07-21 15:04:37.227 INFO  logPackage.LogReader [main] - Method Content: {
    try (Writer writer = new FileWriter(filePath)) {
        new GsonBuilder().create().toJson(jsonMap, writer);
    } catch (IOException e) {
        log("Error writing JSON: " + e.getMessage());
    }
}
2024-07-21 15:04:37.227 TRACE logPackage.LogReader [main] - Method Call inside Method: log("Error writing JSON: " + e.getMessage())
2024-07-21 15:04:37.228 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.228 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.229 TRACE logPackage.LogReader [main] - Method Call inside Method: e.getMessage()
2024-07-21 15:04:37.229 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.229 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.229 TRACE logPackage.LogReader [main] - Method Call inside Method: new GsonBuilder().create().toJson(jsonMap, writer)
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Unique argument types: [java.util.Map<java.lang.String, java.lang.Object>, java.io.Writer]
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Method Call inside Method: new GsonBuilder().create()
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Method Call: log("Error writing JSON: " + e.getMessage())
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Method Call: e.getMessage()
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Method Call: new GsonBuilder().create().toJson(jsonMap, writer)
2024-07-21 15:04:37.230 TRACE logPackage.LogReader [main] - Method Call: new GsonBuilder().create()
2024-07-21 15:04:37.231 INFO  logPackage.LogReader [main] - Method Declaration: Options options()
2024-07-21 15:04:37.231 INFO  logPackage.LogReader [main] - Method Content: {
    Options options = new Options();
    options.addOption("d", "domain", true, "Domain");
    options.addOption("m", "mx", true, "MX to match against policy MX masks");
    options.addOption("j", "json", false, "Show policy details as JSON");
    options.addOption("f", "file", true, "Write policy details to JSON file");
    return options;
}
2024-07-21 15:04:37.231 TRACE logPackage.LogReader [main] - Method Call inside Method: options.addOption("d", "domain", true, "Domain")
2024-07-21 15:04:37.239 TRACE logPackage.LogReader [main] - Unique argument types: [boolean, java.lang.String]
2024-07-21 15:04:37.239 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.239 TRACE logPackage.LogReader [main] - Method Call inside Method: options.addOption("m", "mx", true, "MX to match against policy MX masks")
2024-07-21 15:04:37.239 TRACE logPackage.LogReader [main] - Unique argument types: [boolean, java.lang.String]
2024-07-21 15:04:37.239 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Method Call inside Method: options.addOption("j", "json", false, "Show policy details as JSON")
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Unique argument types: [boolean, java.lang.String]
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Method Call inside Method: options.addOption("f", "file", true, "Write policy details to JSON file")
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Unique argument types: [boolean, java.lang.String]
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Method Call: options.addOption("d", "domain", true, "Domain")
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Method Call: options.addOption("m", "mx", true, "MX to match against policy MX masks")
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Method Call: options.addOption("j", "json", false, "Show policy details as JSON")
2024-07-21 15:04:37.240 TRACE logPackage.LogReader [main] - Method Call: options.addOption("f", "file", true, "Write policy details to JSON file")
2024-07-21 15:04:37.241 INFO  logPackage.LogReader [main] - Method Declaration: void optionsUsage(Options)
2024-07-21 15:04:37.241 INFO  logPackage.LogReader [main] - Method Content: {
    log("java -jar mta-sts.jar");
    log(" SMTP MTA Strict Transport Security");
    log("");
    StringWriter out = new StringWriter();
    PrintWriter pw = new PrintWriter(out);
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(pw, 80, " ", "", options, formatter.getLeftPadding(), formatter.getDescPadding(), "", true);
    pw.flush();
    log(out.toString());
    log("");
}
2024-07-21 15:04:37.241 TRACE logPackage.LogReader [main] - Method Call inside Method: log("java -jar mta-sts.jar")
2024-07-21 15:04:37.241 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.241 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.241 TRACE logPackage.LogReader [main] - Method Call inside Method: log(" SMTP MTA Strict Transport Security")
2024-07-21 15:04:37.241 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.242 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.242 TRACE logPackage.LogReader [main] - Method Call inside Method: log("")
2024-07-21 15:04:37.242 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.242 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.242 TRACE logPackage.LogReader [main] - Method Call inside Method: formatter.printHelp(pw, 80, " ", "", options, formatter.getLeftPadding(), formatter.getDescPadding(), "", true)
2024-07-21 15:04:37.244 ERROR logPackage.LogReader [main] - Error resolving argument type for: options
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Options
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.244 TRACE logPackage.LogReader [main] - Unique argument types: [java.io.PrintWriter, Unresolved, boolean, java.lang.String, MethodCall, int]
2024-07-21 15:04:37.244 TRACE logPackage.LogReader [main] - Number of unique argument types: 6
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Method Call inside Method: formatter.getLeftPadding()
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Method Call inside Method: formatter.getDescPadding()
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Method Call inside Method: pw.flush()
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Method Call inside Method: log(out.toString())
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.245 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Method Call inside Method: out.toString()
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Method Call inside Method: log("")
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.246 TRACE logPackage.LogReader [main] - Method Call: log("java -jar mta-sts.jar")
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: log(" SMTP MTA Strict Transport Security")
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: log("")
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: formatter.printHelp(pw, 80, " ", "", options, formatter.getLeftPadding(), formatter.getDescPadding(), "", true)
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: formatter.getLeftPadding()
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: formatter.getDescPadding()
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: pw.flush()
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: log(out.toString())
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: out.toString()
2024-07-21 15:04:37.247 TRACE logPackage.LogReader [main] - Method Call: log("")
2024-07-21 15:04:37.247 INFO  logPackage.LogReader [main] - Method Declaration: Optional<CommandLine> parseArgs(Options, String[])
2024-07-21 15:04:37.248 INFO  logPackage.LogReader [main] - Method Content: {
    CommandLine cmd = null;
    try {
        cmd = new DefaultParser().parse(options, args, true);
    } catch (Exception e) {
        log("Ran into a problem: " + e.getMessage());
    }
    return Optional.ofNullable(cmd);
}
2024-07-21 15:04:37.248 TRACE logPackage.LogReader [main] - Method Call inside Method: log("Ran into a problem: " + e.getMessage())
2024-07-21 15:04:37.249 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.249 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.250 TRACE logPackage.LogReader [main] - Method Call inside Method: e.getMessage()
2024-07-21 15:04:37.250 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.250 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.250 TRACE logPackage.LogReader [main] - Method Call inside Method: new DefaultParser().parse(options, args, true)
2024-07-21 15:04:37.251 ERROR logPackage.LogReader [main] - Error resolving argument type for: options
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Options
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:91) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.AssignExpr.accept(AssignExpr.java:143) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:535) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.TryStmt.accept(TryStmt.java:143) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.253 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved, boolean, java.lang.String[]]
2024-07-21 15:04:37.254 TRACE logPackage.LogReader [main] - Number of unique argument types: 3
2024-07-21 15:04:37.254 TRACE logPackage.LogReader [main] - Method Call inside Method: Optional.ofNullable(cmd)
2024-07-21 15:04:37.255 ERROR logPackage.LogReader [main] - Error resolving argument type for: cmd
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : CommandLine
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration.getType(JavaParserVariableDeclaration.java:59) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$147(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ReturnStmt.accept(ReturnStmt.java:85) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.256 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.256 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.256 TRACE logPackage.LogReader [main] - Method Call: log("Ran into a problem: " + e.getMessage())
2024-07-21 15:04:37.256 TRACE logPackage.LogReader [main] - Method Call: e.getMessage()
2024-07-21 15:04:37.257 TRACE logPackage.LogReader [main] - Method Call: new DefaultParser().parse(options, args, true)
2024-07-21 15:04:37.257 TRACE logPackage.LogReader [main] - Method Call: Optional.ofNullable(cmd)
2024-07-21 15:04:37.257 INFO  logPackage.LogReader [main] - Method Declaration: void log(String)
2024-07-21 15:04:37.257 INFO  logPackage.LogReader [main] - Method Content: {
    System.out.println(string);
}
2024-07-21 15:04:37.257 TRACE logPackage.LogReader [main] - Method Call inside Method: System.out.println(string)
2024-07-21 15:04:37.258 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.258 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.258 TRACE logPackage.LogReader [main] - Method Call: System.out.println(string)
2024-07-21 15:04:37.283 DEBUG logPackage.LogReader [main] - Logger Variable Declaration: log
2024-07-21 15:04:37.283 TRACE logPackage.LogReader [main] - Method Call: LogManager.getLogger(StrictTransportSecurity.class)
2024-07-21 15:04:37.283 INFO  logPackage.LogReader [main] - Method Declaration: Optional<StsPolicy> getPolicy(String)
2024-07-21 15:04:37.284 INFO  logPackage.LogReader [main] - Method Content: {
    return getPolicy(domain, null);
}
2024-07-21 15:04:37.284 TRACE logPackage.LogReader [main] - Method Call inside Method: getPolicy(domain, null)
2024-07-21 15:04:37.285 TRACE logPackage.LogReader [main] - Unique argument types: [null, java.lang.String]
2024-07-21 15:04:37.285 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.285 TRACE logPackage.LogReader [main] - Method Call: getPolicy(domain, null)
2024-07-21 15:04:37.285 INFO  logPackage.LogReader [main] - Method Declaration: Optional<StsPolicy> getPolicy(String, Config)
2024-07-21 15:04:37.287 INFO  logPackage.LogReader [main] - Method Content: {
    StsPolicy policy;
    // Validate domain.
    if (DomainValidator.getInstance(false).isValid(domain)) {
        // Get DNS TXT record.
        Optional<StsRecord> optional = dnsRecordClient.getStsRecord(domain);
        if (optional.isPresent() && optional.get().isValid()) {
            log.info("Record found and valid");
            // Search policy in cache or fetch from HTTPS.
            policy = getPolicy(optional.get(), config);
            // Validate policy.
            if (!policy.isValid() || policy.isExpired()) {
                throw new BadPolicyException("Policy invalid for: " + domain);
            }
        } else if (!optional.isPresent()) {
            log.warn("Record not found, searching cache for policy");
            // Search policy in cache.
            policy = searchPolicyCache(domain);
            if (policy == null) {
                throw new NoRecordException("Record not found for: " + domain);
            }
        } else {
            throw new BadRecordException("Record invalid for: " + domain);
        }
    } else {
        throw new ValidatorException("Domain invalid: " + domain);
    }
    return Optional.of(fetchRptRecord(policy, config));
}
2024-07-21 15:04:37.287 TRACE logPackage.LogReader [main] - Method Call inside Method: DomainValidator.getInstance(false).isValid(domain)
2024-07-21 15:04:37.288 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.288 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.288 TRACE logPackage.LogReader [main] - Method Call inside Method: DomainValidator.getInstance(false)
2024-07-21 15:04:37.288 TRACE logPackage.LogReader [main] - Unique argument types: [boolean]
2024-07-21 15:04:37.288 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.288 TRACE logPackage.LogReader [main] - Method Call inside Method: dnsRecordClient.getStsRecord(domain)
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.isPresent()
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get().isValid()
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get()
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.isPresent()
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.290 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.291 TRACE logPackage.LogReader [main] - Method Call inside Method: log.warn("Record not found, searching cache for policy")
2024-07-21 15:04:37.291 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.291 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.291 TRACE logPackage.LogReader [main] - Method Call inside Method: searchPolicyCache(domain)
2024-07-21 15:04:37.292 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.292 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.292 TRACE logPackage.LogReader [main] - Method Call inside Method: log.info("Record found and valid")
2024-07-21 15:04:37.292 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.292 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.292 TRACE logPackage.LogReader [main] - Method Call inside Method: getPolicy(optional.get(), config)
2024-07-21 15:04:37.293 ERROR logPackage.LogReader [main] - Error resolving argument type for: config
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Config
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:91) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.AssignExpr.accept(AssignExpr.java:143) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved, MethodCall]
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get()
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.isValid()
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.isExpired()
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Method Call inside Method: Optional.of(fetchRptRecord(policy, config))
2024-07-21 15:04:37.294 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.295 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.295 TRACE logPackage.LogReader [main] - Method Call inside Method: fetchRptRecord(policy, config)
2024-07-21 15:04:37.295 ERROR logPackage.LogReader [main] - Error resolving argument type for: policy
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsPolicy
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration.getType(JavaParserVariableDeclaration.java:59) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$101(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$147(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ReturnStmt.accept(ReturnStmt.java:85) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.297 ERROR logPackage.LogReader [main] - Error resolving argument type for: config
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Config
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$101(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$147(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ReturnStmt.accept(ReturnStmt.java:85) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.297 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.297 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.297 TRACE logPackage.LogReader [main] - Method Call: DomainValidator.getInstance(false).isValid(domain)
2024-07-21 15:04:37.297 TRACE logPackage.LogReader [main] - Method Call: DomainValidator.getInstance(false)
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: dnsRecordClient.getStsRecord(domain)
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: optional.isPresent()
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: optional.get().isValid()
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: optional.isPresent()
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: log.warn("Record not found, searching cache for policy")
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: searchPolicyCache(domain)
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: log.info("Record found and valid")
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: getPolicy(optional.get(), config)
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.298 TRACE logPackage.LogReader [main] - Method Call: policy.isValid()
2024-07-21 15:04:37.299 TRACE logPackage.LogReader [main] - Method Call: policy.isExpired()
2024-07-21 15:04:37.299 TRACE logPackage.LogReader [main] - Method Call: Optional.of(fetchRptRecord(policy, config))
2024-07-21 15:04:37.299 TRACE logPackage.LogReader [main] - Method Call: fetchRptRecord(policy, config)
2024-07-21 15:04:37.299 INFO  logPackage.LogReader [main] - Method Declaration: StsPolicy getPolicy(StsRecord, Config)
2024-07-21 15:04:37.299 INFO  logPackage.LogReader [main] - Method Content: {
    // Search policy in cache first.
    StsPolicy policy = searchPolicyCache(stsRecord);
    // Fetch policy if not in cache or expired.
    if (policy == null || policy.isExpired()) {
        return fetchPolicyHttps(stsRecord, config);
    }
    return policy;
}
2024-07-21 15:04:37.299 TRACE logPackage.LogReader [main] - Method Call inside Method: searchPolicyCache(stsRecord)
2024-07-21 15:04:37.300 ERROR logPackage.LogReader [main] - Error resolving argument type for: stsRecord
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsRecord
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.301 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.301 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.301 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.isExpired()
2024-07-21 15:04:37.301 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.301 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.301 TRACE logPackage.LogReader [main] - Method Call inside Method: fetchPolicyHttps(stsRecord, config)
2024-07-21 15:04:37.302 ERROR logPackage.LogReader [main] - Error resolving argument type for: stsRecord
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsRecord
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$147(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ReturnStmt.accept(ReturnStmt.java:85) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.303 ERROR logPackage.LogReader [main] - Error resolving argument type for: config
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Config
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$147(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:475) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ReturnStmt.accept(ReturnStmt.java:85) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.303 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.303 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.304 TRACE logPackage.LogReader [main] - Method Call: searchPolicyCache(stsRecord)
2024-07-21 15:04:37.304 TRACE logPackage.LogReader [main] - Method Call: policy.isExpired()
2024-07-21 15:04:37.304 TRACE logPackage.LogReader [main] - Method Call: fetchPolicyHttps(stsRecord, config)
2024-07-21 15:04:37.304 INFO  logPackage.LogReader [main] - Method Declaration: StsPolicy searchPolicyCache(StsRecord)
2024-07-21 15:04:37.304 INFO  logPackage.LogReader [main] - Method Content: {
    StsPolicy policy = null;
    if (cache != null) {
        Optional<StsPolicy> optional = cache.getByRecord(stsRecord);
        if (optional.isPresent()) {
            policy = optional.get();
        }
    }
    return policy;
}
2024-07-21 15:04:37.304 TRACE logPackage.LogReader [main] - Method Call inside Method: cache.getByRecord(stsRecord)
2024-07-21 15:04:37.305 ERROR logPackage.LogReader [main] - Error resolving argument type for: stsRecord
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsRecord
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.306 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.306 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.306 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.isPresent()
2024-07-21 15:04:37.306 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.306 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.307 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get()
2024-07-21 15:04:37.307 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.307 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.307 TRACE logPackage.LogReader [main] - Method Call: cache.getByRecord(stsRecord)
2024-07-21 15:04:37.307 TRACE logPackage.LogReader [main] - Method Call: optional.isPresent()
2024-07-21 15:04:37.307 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.307 INFO  logPackage.LogReader [main] - Method Declaration: StsPolicy searchPolicyCache(String)
2024-07-21 15:04:37.308 INFO  logPackage.LogReader [main] - Method Content: {
    StsPolicy policy = null;
    if (cache != null) {
        Optional<StsPolicy> optional = cache.getByDomain(domain);
        if (optional.isPresent()) {
            policy = optional.get();
        }
    }
    return policy;
}
2024-07-21 15:04:37.308 TRACE logPackage.LogReader [main] - Method Call inside Method: cache.getByDomain(domain)
2024-07-21 15:04:37.308 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.308 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.isPresent()
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get()
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Method Call: cache.getByDomain(domain)
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Method Call: optional.isPresent()
2024-07-21 15:04:37.309 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.309 INFO  logPackage.LogReader [main] - Method Declaration: StsPolicy fetchPolicyHttps(StsRecord, Config)
2024-07-21 15:04:37.310 INFO  logPackage.LogReader [main] - Method Content: {
    HttpsResponse response = httpsPolicyClient.getPolicy(stsRecord, Optional.ofNullable(config).map(Config::getPolicyMaxBodySize).orElse(// get default
    new Config().getPolicyMaxBodySize()));
    StsPolicy policy = new StsPolicy(stsRecord, response);
    if (config != null) {
        policy.setConfig(config);
    }
    policy.make();
    if (policy.isValid() && cache != null) {
        cache.put(policy);
    }
    return policy;
}
2024-07-21 15:04:37.310 TRACE logPackage.LogReader [main] - Method Call inside Method: httpsPolicyClient.getPolicy(stsRecord, Optional.ofNullable(config).map(Config::getPolicyMaxBodySize).orElse(// get default
new Config().getPolicyMaxBodySize()))
2024-07-21 15:04:37.311 ERROR logPackage.LogReader [main] - Error resolving argument type for: stsRecord
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsRecord
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved, MethodCall]
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Number of unique argument types: 2
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Method Call inside Method: Optional.ofNullable(config).map(Config::getPolicyMaxBodySize).orElse(// get default
new Config().getPolicyMaxBodySize())
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Method Call inside Method: // get default
new Config().getPolicyMaxBodySize()
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.312 TRACE logPackage.LogReader [main] - Method Call inside Method: Optional.ofNullable(config).map(Config::getPolicyMaxBodySize)
2024-07-21 15:04:37.313 ERROR logPackage.LogReader [main] - Error resolving argument type for: Config::getPolicyMaxBodySize
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol in Optional.ofNullable(config).map(Config::getPolicyMaxBodySize) : Optional.ofNullable(config)
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.findTypeDeclarations(AbstractJavaParserContext.java:195) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveMethod(MethodCallExprContext.java:150) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(JavaParserFacade.java:273) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:594) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodReferenceExpr.accept(MethodReferenceExpr.java:93) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$102(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$101(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
Caused by: com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Config
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:379) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(JavaParserFacade.java:648) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:324) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:118) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.findTypeDeclarations(AbstractJavaParserContext.java:186) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	... 65 more
2024-07-21 15:04:37.313 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.313 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.313 TRACE logPackage.LogReader [main] - Method Call inside Method: Optional.ofNullable(config)
2024-07-21 15:04:37.314 ERROR logPackage.LogReader [main] - Error resolving argument type for: config
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Config
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$102(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$102(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:364) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$101(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:362) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:134) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.314 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.314 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.314 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.setConfig(config)
2024-07-21 15:04:37.315 ERROR logPackage.LogReader [main] - Error resolving argument type for: config
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : Config
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.getType(JavaParserParameterDeclaration.java:68) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.make()
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.isValid()
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.316 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.317 TRACE logPackage.LogReader [main] - Method Call inside Method: cache.put(policy)
2024-07-21 15:04:37.318 ERROR logPackage.LogReader [main] - Error resolving argument type for: policy
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : StsPolicy
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration.getType(JavaParserVariableDeclaration.java:59) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:301) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.IfStmt.accept(IfStmt.java:90) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.318 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.318 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.318 TRACE logPackage.LogReader [main] - Method Call: httpsPolicyClient.getPolicy(stsRecord, Optional.ofNullable(config).map(Config::getPolicyMaxBodySize).orElse(// get default
new Config().getPolicyMaxBodySize()))
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: Optional.ofNullable(config).map(Config::getPolicyMaxBodySize).orElse(// get default
new Config().getPolicyMaxBodySize())
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: // get default
new Config().getPolicyMaxBodySize()
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: Optional.ofNullable(config).map(Config::getPolicyMaxBodySize)
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: Optional.ofNullable(config)
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: policy.setConfig(config)
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: policy.make()
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: policy.isValid()
2024-07-21 15:04:37.319 TRACE logPackage.LogReader [main] - Method Call: cache.put(policy)
2024-07-21 15:04:37.319 INFO  logPackage.LogReader [main] - Method Declaration: StsPolicy fetchRptRecord(StsPolicy, Config)
2024-07-21 15:04:37.320 INFO  logPackage.LogReader [main] - Method Content: {
    if (config == null || config.isFetchRptRecord()) {
        Optional<StsReport> optional = dnsRecordClient.getRptRecord(policy.getRecord().getDomain());
        if (optional.isPresent() && optional.get().isValid()) {
            policy.setReport(optional.get());
        }
    }
    return policy;
}
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Method Call inside Method: config.isFetchRptRecord()
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Method Call inside Method: dnsRecordClient.getRptRecord(policy.getRecord().getDomain())
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord().getDomain()
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.getRecord()
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.isPresent()
2024-07-21 15:04:37.320 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get().isValid()
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get()
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call inside Method: policy.setReport(optional.get())
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Unique argument types: [MethodCall]
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.get()
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Unique argument types: []
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Number of unique argument types: 0
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call: config.isFetchRptRecord()
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call: dnsRecordClient.getRptRecord(policy.getRecord().getDomain())
2024-07-21 15:04:37.321 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord().getDomain()
2024-07-21 15:04:37.322 TRACE logPackage.LogReader [main] - Method Call: policy.getRecord()
2024-07-21 15:04:37.322 TRACE logPackage.LogReader [main] - Method Call: optional.isPresent()
2024-07-21 15:04:37.322 TRACE logPackage.LogReader [main] - Method Call: optional.get().isValid()
2024-07-21 15:04:37.322 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.322 TRACE logPackage.LogReader [main] - Method Call: policy.setReport(optional.get())
2024-07-21 15:04:37.322 TRACE logPackage.LogReader [main] - Method Call: optional.get()
2024-07-21 15:04:37.322 INFO  logPackage.LogReader [main] - Method Declaration: List<DnsRecord> getMxRecords(String)
2024-07-21 15:04:37.322 INFO  logPackage.LogReader [main] - Method Content: {
    Optional<List<DnsRecord>> optional = dnsRecordClient.getMxRecords(domain);
    List<DnsRecord> mxRecords = optional.orElseGet(ArrayList::new);
    Comparator<DnsRecord> compareByName = Comparator.comparing(DnsRecord::getName);
    mxRecords.sort(compareByName);
    Comparator<DnsRecord> compareByPriority = Comparator.comparingInt(DnsRecord::getPriority);
    mxRecords.sort(compareByPriority);
    return mxRecords;
}
2024-07-21 15:04:37.323 TRACE logPackage.LogReader [main] - Method Call inside Method: dnsRecordClient.getMxRecords(domain)
2024-07-21 15:04:37.323 TRACE logPackage.LogReader [main] - Unique argument types: [java.lang.String]
2024-07-21 15:04:37.323 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.323 TRACE logPackage.LogReader [main] - Method Call inside Method: optional.orElseGet(ArrayList::new)
2024-07-21 15:04:37.325 TRACE logPackage.LogReader [main] - Unique argument types: [java.util.ArrayList<E>]
2024-07-21 15:04:37.325 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.325 TRACE logPackage.LogReader [main] - Method Call inside Method: Comparator.comparing(DnsRecord::getName)
2024-07-21 15:04:37.346 ERROR logPackage.LogReader [main] - Error resolving argument type for: DnsRecord::getName
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol in DnsRecord : Solving DnsRecord
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:365) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.TypeExpr.accept(TypeExpr.java:75) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.toMethodUsage(JavaParserFacade.java:397) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:626) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodReferenceExpr.accept(MethodReferenceExpr.java:93) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.347 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.347 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.347 TRACE logPackage.LogReader [main] - Method Call inside Method: mxRecords.sort(compareByName)
2024-07-21 15:04:37.347 ERROR logPackage.LogReader [main] - Error resolving argument type for: compareByName
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : DnsRecord
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.type.ClassOrInterfaceType.lambda$convertToUsage$3(ClassOrInterfaceType.java:352) ~[javaparser-core-3.25.8.jar:?]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197) ~[?:?]
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625) ~[?:?]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[?:?]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[?:?]
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921) ~[?:?]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?]
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682) ~[?:?]
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:352) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration.getType(JavaParserVariableDeclaration.java:59) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.348 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.348 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.348 TRACE logPackage.LogReader [main] - Method Call inside Method: Comparator.comparingInt(DnsRecord::getPriority)
2024-07-21 15:04:37.350 ERROR logPackage.LogReader [main] - Error resolving argument type for: DnsRecord::getPriority
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol in DnsRecord : Solving DnsRecord
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:365) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.TypeExpr.accept(TypeExpr.java:75) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.toMethodUsage(JavaParserFacade.java:397) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:626) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.MethodReferenceExpr.accept(MethodReferenceExpr.java:93) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$178(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at java.util.Optional.ifPresent(Optional.java:178) ~[?:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:581) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.VariableDeclarator.accept(VariableDeclarator.java:151) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$176(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:575) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(VariableDeclarationExpr.java:120) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.351 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.351 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.351 TRACE logPackage.LogReader [main] - Method Call inside Method: mxRecords.sort(compareByPriority)
2024-07-21 15:04:37.352 ERROR logPackage.LogReader [main] - Error resolving argument type for: compareByPriority
com.github.javaparser.resolution.UnsolvedSymbolException: Unsolved symbol : DnsRecord
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:347) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.type.ClassOrInterfaceType.lambda$convertToUsage$3(ClassOrInterfaceType.java:352) ~[javaparser-core-3.25.8.jar:?]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197) ~[?:?]
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625) ~[?:?]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[?:?]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[?:?]
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921) ~[?:?]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?]
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682) ~[?:?]
	at com.github.javaparser.ast.type.ClassOrInterfaceType.convertToUsage(ClassOrInterfaceType.java:352) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(JavaParserFacade.java:607) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:639) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(JavaParserFacade.java:635) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration.getType(JavaParserVariableDeclaration.java:59) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.model.Value.from(Value.java:45) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.resolution.Context.solveSymbolAsValueInParentContext(Context.java:199) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext.solveSymbolAsValue(MethodCallExprContext.java:145) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:76) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(SymbolSolver.java:82) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:334) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:64) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:81) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:501) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:349) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:331) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.symbolsolver.JavaSymbolSolver.calculateType(JavaSymbolSolver.java:403) ~[javaparser-symbol-solver-core-3.25.8.jar:?]
	at com.github.javaparser.ast.expr.Expression.calculateResolvedType(Expression.java:575) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.resolveArgumentType(LogReader.java:144) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.lambda$0(LogReader.java:123) ~[classes/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:121) ~[classes/:?]
	at logPackage.LogReader$StatementVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.expr.MethodCallExpr.accept(MethodCallExpr.java:124) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:260) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.ExpressionStmt.accept(ExpressionStmt.java:79) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$19(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:109) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.stmt.BlockStmt.accept(BlockStmt.java:78) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:106) ~[classes/:?]
	at logPackage.LogReader$MethodContentVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:79) ~[classes/:?]
	at logPackage.LogReader$LogVisitor.visit(LogReader.java:1) ~[classes/:?]
	at com.github.javaparser.ast.body.MethodDeclaration.accept(MethodDeclaration.java:106) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$32(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:155) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(ClassOrInterfaceDeclaration.java:103) ~[javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.lambda$visit$44(VoidVisitorAdapter.java:176) ~[javaparser-core-3.25.8.jar:?]
	at java.util.ArrayList.forEach(ArrayList.java:1511) [?:?]
	at com.github.javaparser.ast.NodeList.forEach(NodeList.java:288) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(VoidVisitorAdapter.java:176) [javaparser-core-3.25.8.jar:?]
	at com.github.javaparser.ast.CompilationUnit.accept(CompilationUnit.java:132) [javaparser-core-3.25.8.jar:?]
	at logPackage.LogReader.parseFile(LogReader.java:62) [classes/:?]
	at logPackage.LogReader.main(LogReader.java:47) [classes/:?]
	at logPackage.MainApplication.main(MainApplication.java:7) [classes/:?]
2024-07-21 15:04:37.352 TRACE logPackage.LogReader [main] - Unique argument types: [Unresolved]
2024-07-21 15:04:37.352 TRACE logPackage.LogReader [main] - Number of unique argument types: 1
2024-07-21 15:04:37.353 TRACE logPackage.LogReader [main] - Method Call: dnsRecordClient.getMxRecords(domain)
2024-07-21 15:04:37.353 TRACE logPackage.LogReader [main] - Method Call: optional.orElseGet(ArrayList::new)
2024-07-21 15:04:37.353 TRACE logPackage.LogReader [main] - Method Call: Comparator.comparing(DnsRecord::getName)
2024-07-21 15:04:37.353 TRACE logPackage.LogReader [main] - Method Call: mxRecords.sort(compareByName)
2024-07-21 15:04:37.353 TRACE logPackage.LogReader [main] - Method Call: Comparator.comparingInt(DnsRecord::getPriority)
2024-07-21 15:04:37.353 TRACE logPackage.LogReader [main] - Method Call: mxRecords.sort(compareByPriority)
